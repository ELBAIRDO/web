.. _envoy_api_file_envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto:

TCP Proxy
=========

TCP Proxy :ref:`configuration overview <config_network_filters_tcp_proxy>`.

.. _envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy:

config.filter.network.tcp_proxy.v2.TcpProxy
-------------------------------------------

`[config.filter.network.tcp_proxy.v2.TcpProxy proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto#L22>`_


.. code-block:: json

  {
    "stat_prefix": "...",
    "cluster": "...",
    "weighted_clusters": "{...}",
    "metadata_match": "{...}",
    "idle_timeout": "{...}",
    "access_log": [],
    "deprecated_v1": "{...}",
    "max_connect_attempts": "{...}"
  }

.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The prefix to use when emitting :ref:`statistics
  <config_network_filters_tcp_proxy_stats>`.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The upstream cluster to connect to.
  
  .. note::
  
   Complex routing (based on connection properties) is being implemented in listeners. Once
   fully implemented, this field (or `weighted_clusters`) will be the only way to configure
   the target cluster. In the interim, complex routing requires using a :ref:`deprecated_v1
   <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1>` configuration.
   This field is ignored if a `deprecated_v1` configuration is set.
  
  
  
  
  Precisely one of :ref:`cluster <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.cluster>`, :ref:`weighted_clusters <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.weighted_clusters>` must be set.
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.weighted_clusters:

weighted_clusters
  (:ref:`config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster <envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster>`) Multiple upstream clusters can be specified for a given route. The
  request is routed to one of the upstream clusters based on weights
  assigned to each cluster.
  
  .. note::
  
   This field is ignored if the :ref:`deprecated_v1
   <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1>`
   configuration is set.
  
  
  
  Precisely one of :ref:`cluster <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.cluster>`, :ref:`weighted_clusters <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.weighted_clusters>` must be set.
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.metadata_match:

metadata_match
  (:ref:`core.Metadata <envoy_api_msg_core.Metadata>`) Optional endpoint metadata match criteria. Only endpoints in the upstream
  cluster with metadata matching that set in metadata_match will be
  considered. The filter name should be specified as *envoy.lb*.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.idle_timeout:

idle_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The idle timeout for connections managed by the TCP proxy filter. The idle timeout
  is defined as the period in which there are no bytes sent or received on either
  the upstream or downstream connection. If not set, connections will never be closed
  by the TCP proxy due to being idle.
  
  


.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.access_log:

access_log
  (:ref:`config.filter.accesslog.v2.AccessLog <envoy_api_msg_config.filter.accesslog.v2.AccessLog>`) Configuration for :ref:`access logs <arch_overview_access_logs>`
  emitted by the this tcp_proxy.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1:

deprecated_v1
  (:ref:`config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 <envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1>`) TCP Proxy filter configuration using deprecated V1 format. This is required for complex
  routing until filter chain matching in the listener is implemented.
  
  Example:
  
  .. code-block:: yaml
  
      - name: "envoy.tcp_proxy"
        config:
          deprecated_v1: true
          value:
            stat_prefix: "prefix"
            access_log:
              - ...
            route_config:
              routes:
                - cluster: "cluster"
                  destination_ip_list:
                    - "10.1.0.0/8"
                  destination_ports: "8080"
                  source_ip_list:
                    - "10.1.0.0/16"
                    - "2001:db8::/32"
                  source_ports: "8000,9000-9999"
  
  .. attention::
  
    Using the deprecated V1 configuration excludes the use of any V2 configuration options. Only
    the V1 configuration is used. All available fields are shown in the example, although the
    access log configuration is omitted for simplicity. The access log configuration uses the
    :repo:`deprecated V1 access log configuration<source/common/json/config_schemas.cc>`.
  
  .. attention::
  
    In the deprecated V1 configuration, source and destination CIDR ranges are specified as a
    list of strings with each string in CIDR notation. Source and destination ports are
    specified as single strings containing a comma-separated list of ports and/or port ranges.
  
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.max_connect_attempts:

max_connect_attempts
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The maximum number of unsuccessful connection attempts that will be made before
  giving up. If the parameter is not specified, 1 connection attempt will be made.
  
  
.. _envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1:

config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1
--------------------------------------------------------

`[config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto#L84>`_

TCP Proxy filter configuration using V1 format, until Envoy gets the
ability to match source/destination at the listener level (called
:ref:`filter chain match <envoy_api_msg_listener.FilterChainMatch>`).

.. code-block:: json

  {
    "routes": []
  }

.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.routes:

routes
  (:ref:`config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute <envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute>`, *REQUIRED*) The route table for the filter. All filter instances must have a route
  table, even if it is empty.
  
  
.. _envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute:

config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute
-----------------------------------------------------------------

`[config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto#L92>`_

A TCP proxy route consists of a set of optional L4 criteria and the
name of a cluster. If a downstream connection matches all the
specified criteria, the cluster in the route is used for the
corresponding upstream connection. Routes are tried in the order
specified until a match is found. If no match is found, the connection
is closed. A route with no criteria is valid and always produces a
match.

.. code-block:: json

  {
    "cluster": "...",
    "destination_ip_list": [],
    "destination_ports": "...",
    "source_ip_list": [],
    "source_ports": "..."
  }

.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The cluster to connect to when a the downstream network connection
  matches the specified criteria.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute.destination_ip_list:

destination_ip_list
  (:ref:`core.CidrRange <envoy_api_msg_core.CidrRange>`) An optional list of IP address subnets in the form
  “ip_address/xx”. The criteria is satisfied if the destination IP
  address of the downstream connection is contained in at least one of
  the specified subnets. If the parameter is not specified or the list
  is empty, the destination IP address is ignored. The destination IP
  address of the downstream connection might be different from the
  addresses on which the proxy is listening if the connection has been
  redirected.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute.destination_ports:

destination_ports
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional string containing a comma-separated list of port numbers
  or ranges. The criteria is satisfied if the destination port of the
  downstream connection is contained in at least one of the specified
  ranges. If the parameter is not specified, the destination port is
  ignored. The destination port address of the downstream connection
  might be different from the port on which the proxy is listening if
  the connection has been redirected.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute.source_ip_list:

source_ip_list
  (:ref:`core.CidrRange <envoy_api_msg_core.CidrRange>`) An optional list of IP address subnets in the form
  “ip_address/xx”. The criteria is satisfied if the source IP address
  of the downstream connection is contained in at least one of the
  specified subnets. If the parameter is not specified or the list is
  empty, the source IP address is ignored.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute.source_ports:

source_ports
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional string containing a comma-separated list of port numbers
  or ranges. The criteria is satisfied if the source port of the
  downstream connection is contained in at least one of the specified
  ranges. If the parameter is not specified, the source port is
  ignored.
  
  



.. _envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster:

config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster
-----------------------------------------------------------

`[config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto#L183>`_

Allows for specification of multiple upstream clusters along with weights
that indicate the percentage of traffic to be forwarded to each cluster.
The router selects an upstream cluster based on these weights.

.. code-block:: json

  {
    "clusters": []
  }

.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.clusters:

clusters
  (:ref:`config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight <envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight>`, *REQUIRED*) Specifies one or more upstream clusters associated with the route.
  
  
.. _envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight:

config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight
-------------------------------------------------------------------------

`[config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto#L184>`_


.. code-block:: json

  {
    "name": "...",
    "weight": "..."
  }

.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Name of the upstream cluster.
  
  
.. _envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight.weight:

weight
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When a request matches the route, the choice of an upstream cluster is
  determined by its weight. The sum of weights across all entries in the
  clusters array determines the total weight.
  
  



