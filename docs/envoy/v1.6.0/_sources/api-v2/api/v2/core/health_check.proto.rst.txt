.. _envoy_api_file_envoy/api/v2/core/health_check.proto:

Health check
============

* Health checking :ref:`architecture overview <arch_overview_health_checking>`.
* If health checking is configured for a cluster, additional statistics are emitted. They are
  documented :ref:`here <config_cluster_manager_cluster_stats>`.

.. _envoy_api_msg_core.HealthCheck:

core.HealthCheck
----------------

`[core.HealthCheck proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/core/health_check.proto#L17>`_


.. code-block:: json

  {
    "timeout": "{...}",
    "interval": "{...}",
    "interval_jitter": "{...}",
    "unhealthy_threshold": "{...}",
    "healthy_threshold": "{...}",
    "reuse_connection": "{...}",
    "http_health_check": "{...}",
    "tcp_health_check": "{...}",
    "redis_health_check": "{...}",
    "grpc_health_check": "{...}",
    "no_traffic_interval": "{...}"
  }

.. _envoy_api_field_core.HealthCheck.timeout:

timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The time to wait for a health check response. If the timeout is reached the
  health check attempt will be considered a failure.
  
  
.. _envoy_api_field_core.HealthCheck.interval:

interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The interval between health checks.
  
  
.. _envoy_api_field_core.HealthCheck.interval_jitter:

interval_jitter
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) An optional jitter amount in millseconds. If specified, during every
  internal Envoy will add 0 to interval_jitter to the wait time.
  
  
.. _envoy_api_field_core.HealthCheck.unhealthy_threshold:

unhealthy_threshold
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The number of unhealthy health checks required before a host is marked
  unhealthy. Note that for *http* health checking if a host responds with 503
  this threshold is ignored and the host is considered unhealthy immediately.
  
  
.. _envoy_api_field_core.HealthCheck.healthy_threshold:

healthy_threshold
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The number of healthy health checks required before a host is marked
  healthy. Note that during startup, only a single successful health check is
  required to mark a host healthy.
  
  

.. _envoy_api_field_core.HealthCheck.reuse_connection:

reuse_connection
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Reuse health check connection between health checks. Default is true.
  
  
.. _envoy_api_field_core.HealthCheck.http_health_check:

http_health_check
  (:ref:`core.HealthCheck.HttpHealthCheck <envoy_api_msg_core.HealthCheck.HttpHealthCheck>`) HTTP health check.
  
  
  Precisely one of :ref:`http_health_check <envoy_api_field_core.HealthCheck.http_health_check>`, :ref:`tcp_health_check <envoy_api_field_core.HealthCheck.tcp_health_check>`, :ref:`redis_health_check <envoy_api_field_core.HealthCheck.redis_health_check>`, :ref:`grpc_health_check <envoy_api_field_core.HealthCheck.grpc_health_check>` must be set.
  
.. _envoy_api_field_core.HealthCheck.tcp_health_check:

tcp_health_check
  (:ref:`core.HealthCheck.TcpHealthCheck <envoy_api_msg_core.HealthCheck.TcpHealthCheck>`) TCP health check.
  
  
  Precisely one of :ref:`http_health_check <envoy_api_field_core.HealthCheck.http_health_check>`, :ref:`tcp_health_check <envoy_api_field_core.HealthCheck.tcp_health_check>`, :ref:`redis_health_check <envoy_api_field_core.HealthCheck.redis_health_check>`, :ref:`grpc_health_check <envoy_api_field_core.HealthCheck.grpc_health_check>` must be set.
  
.. _envoy_api_field_core.HealthCheck.redis_health_check:

redis_health_check
  (:ref:`core.HealthCheck.RedisHealthCheck <envoy_api_msg_core.HealthCheck.RedisHealthCheck>`) Redis health check.
  
  
  Precisely one of :ref:`http_health_check <envoy_api_field_core.HealthCheck.http_health_check>`, :ref:`tcp_health_check <envoy_api_field_core.HealthCheck.tcp_health_check>`, :ref:`redis_health_check <envoy_api_field_core.HealthCheck.redis_health_check>`, :ref:`grpc_health_check <envoy_api_field_core.HealthCheck.grpc_health_check>` must be set.
  
.. _envoy_api_field_core.HealthCheck.grpc_health_check:

grpc_health_check
  (:ref:`core.HealthCheck.GrpcHealthCheck <envoy_api_msg_core.HealthCheck.GrpcHealthCheck>`) gRPC health check.
  
  
  Precisely one of :ref:`http_health_check <envoy_api_field_core.HealthCheck.http_health_check>`, :ref:`tcp_health_check <envoy_api_field_core.HealthCheck.tcp_health_check>`, :ref:`redis_health_check <envoy_api_field_core.HealthCheck.redis_health_check>`, :ref:`grpc_health_check <envoy_api_field_core.HealthCheck.grpc_health_check>` must be set.
  
.. _envoy_api_field_core.HealthCheck.no_traffic_interval:

no_traffic_interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The "no traffic interval" is a special health check interval that is used when a cluster has
  never had traffic routed to it. This lower interval allows cluster information to be kept up to
  date, without sending a potentially large amount of active health checking traffic for no
  reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
  standard health check interval that is defined.
  
  The default value for "no traffic interval" is 60 seconds.
  
  
.. _envoy_api_msg_core.HealthCheck.Payload:

core.HealthCheck.Payload
------------------------

`[core.HealthCheck.Payload proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/core/health_check.proto#L46>`_

Describes the encoding of the payload bytes in the payload.

.. code-block:: json

  {
    "text": "..."
  }

.. _envoy_api_field_core.HealthCheck.Payload.text:

text
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Hex encoded payload. E.g., "000000FF".
  
  
  Precisely one of :ref:`text <envoy_api_field_core.HealthCheck.Payload.text>` must be set.
  



.. _envoy_api_msg_core.HealthCheck.HttpHealthCheck:

core.HealthCheck.HttpHealthCheck
--------------------------------

`[core.HealthCheck.HttpHealthCheck proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/core/health_check.proto#L58>`_


.. code-block:: json

  {
    "host": "...",
    "path": "...",
    "service_name": "..."
  }

.. _envoy_api_field_core.HealthCheck.HttpHealthCheck.host:

host
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The value of the host header in the HTTP health check request. If
  left empty (default value), the IP on behalf of which this health check is performed will be
  used.
  
  
.. _envoy_api_field_core.HealthCheck.HttpHealthCheck.path:

path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Specifies the HTTP path that will be requested during health checking. For example
  */healthcheck*.
  
  


.. _envoy_api_field_core.HealthCheck.HttpHealthCheck.service_name:

service_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional service name parameter which is used to validate the identity of
  the health checked cluster. See the :ref:`architecture overview
  <arch_overview_health_checking_identity>` for more information.
  
  


.. _envoy_api_msg_core.HealthCheck.TcpHealthCheck:

core.HealthCheck.TcpHealthCheck
-------------------------------

`[core.HealthCheck.TcpHealthCheck proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/core/health_check.proto#L80>`_


.. code-block:: json

  {
    "send": "{...}",
    "receive": []
  }

.. _envoy_api_field_core.HealthCheck.TcpHealthCheck.send:

send
  (:ref:`core.HealthCheck.Payload <envoy_api_msg_core.HealthCheck.Payload>`) Empty payloads imply a connect-only health check.
  
  
.. _envoy_api_field_core.HealthCheck.TcpHealthCheck.receive:

receive
  (:ref:`core.HealthCheck.Payload <envoy_api_msg_core.HealthCheck.Payload>`) When checking the response, “fuzzy” matching is performed such that each
  binary block must be found, and in the order specified, but not
  necessarily contiguous.
  
  


.. _envoy_api_msg_core.HealthCheck.RedisHealthCheck:

core.HealthCheck.RedisHealthCheck
---------------------------------

`[core.HealthCheck.RedisHealthCheck proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/core/health_check.proto#L90>`_


.. code-block:: json

  {
    "key": "..."
  }

.. _envoy_api_field_core.HealthCheck.RedisHealthCheck.key:

key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If set, optionally perform ``EXISTS <key>`` instead of ``PING``. A return value
  from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
  than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
  by setting the specified key to any value and waiting for traffic to drain.
  
  


.. _envoy_api_msg_core.HealthCheck.GrpcHealthCheck:

core.HealthCheck.GrpcHealthCheck
--------------------------------

`[core.HealthCheck.GrpcHealthCheck proto] <https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/core/health_check.proto#L102>`_

`grpc.health.v1.Health
<https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
healthcheck. See `gRPC doc <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
for details.

.. code-block:: json

  {
    "service_name": "..."
  }

.. _envoy_api_field_core.HealthCheck.GrpcHealthCheck.service_name:

service_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An optional service name parameter which will be sent to gRPC service in
  `grpc.health.v1.HealthCheckRequest
  <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
  message. See `gRPC health-checking overview
  <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
  
  


