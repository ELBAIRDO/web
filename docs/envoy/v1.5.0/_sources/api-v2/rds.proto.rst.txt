.. _envoy_api_file_api/rds.proto:

HTTP route management and RDS
=============================


.. _envoy_api_msg_RouteConfiguration:

RouteConfiguration
------------------

`[RouteConfiguration proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L35>`_

* Routing :ref:`architecture overview <arch_overview_http_routing>`
* HTTP :ref:`router filter <config_http_filters_router>`

.. code-block:: json

  {
    "name": "...",
    "virtual_hosts": [],
    "internal_only_headers": [],
    "response_headers_to_add": [],
    "response_headers_to_remove": [],
    "request_headers_to_add": [],
    "validate_clusters": "{...}"
  }

.. _envoy_api_field_RouteConfiguration.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the route configuration. For example, it might match
  :ref:`route_config_name <envoy_api_field_filter.network.Rds.route_config_name>` in
  :ref:`envoy_api_msg_filter.network.Rds`.
  
  
.. _envoy_api_field_RouteConfiguration.virtual_hosts:

virtual_hosts
  (:ref:`VirtualHost <envoy_api_msg_VirtualHost>`) An array of virtual hosts that make up the route table.
  
  
.. _envoy_api_field_RouteConfiguration.internal_only_headers:

internal_only_headers
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Optionally specifies a list of HTTP headers that the connection manager
  will consider to be internal only. If they are found on external requests they will be cleaned
  prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
  information.
  
  
.. _envoy_api_field_RouteConfiguration.response_headers_to_add:

response_headers_to_add
  (:ref:`HeaderValueOption <envoy_api_msg_HeaderValueOption>`) Specifies a list of HTTP headers that should be added to each response that
  the connection manager encodes. Headers specified at this level are applied
  after headers from any enclosed :ref:`envoy_api_msg_VirtualHost` or
  :ref:`envoy_api_msg_RouteAction`.
  
  
.. _envoy_api_field_RouteConfiguration.response_headers_to_remove:

response_headers_to_remove
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies a list of HTTP headers that should be removed from each response
  that the connection manager encodes.
  
  
.. _envoy_api_field_RouteConfiguration.request_headers_to_add:

request_headers_to_add
  (:ref:`HeaderValueOption <envoy_api_msg_HeaderValueOption>`) Specifies a list of HTTP headers that should be added to each request
  routed by the HTTP connection manager. Headers specified at this level are
  applied after headers from any enclosed :ref:`envoy_api_msg_VirtualHost` or
  :ref:`envoy_api_msg_RouteAction`. For more information see the documentation on
  :ref:`custom request headers <config_http_conn_man_headers_custom_request_headers>`.
  
  
.. _envoy_api_field_RouteConfiguration.validate_clusters:

validate_clusters
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) An optional boolean that specifies whether the clusters that the route
  table refers to will be validated by the cluster manager. If set to true
  and a route refers to a non-existent cluster, the route table will not
  load. If set to false and a route refers to a non-existent cluster, the
  route table will load and the router filter will return a 404 if the route
  is selected at runtime. This setting defaults to true if the route table
  is statically defined via the :ref:`route_config
  <envoy_api_field_filter.network.HttpConnectionManager.route_config>` option. This setting
  default to false if the route table is loaded dynamically via the :ref:`rds
  <envoy_api_field_filter.network.HttpConnectionManager.rds>` option. Users
  may which to override the default behavior in certain cases (for example
  when using CDS with a static route table).
  
  


.. _envoy_api_msg_VirtualHost:

VirtualHost
-----------

`[VirtualHost proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L87>`_

The top level element in the routing configuration is a virtual host. Each virtual host has
a logical name as well as a set of domains that get routed to it based on the incoming request's
host header. This allows a single listener to service multiple top level domain path trees. Once
a virtual host is selected based on the domain, the routes are processed in order to see which
upstream cluster to route to or whether to perform a redirect.

.. code-block:: json

  {
    "name": "...",
    "domains": [],
    "routes": [],
    "require_tls": "...",
    "virtual_clusters": [],
    "rate_limits": [],
    "request_headers_to_add": [],
    "response_headers_to_add": [],
    "response_headers_to_remove": [],
    "cors": "{...}"
  }

.. _envoy_api_field_VirtualHost.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The logical name of the virtual host. This is used when emitting certain
  statistics but is not relevant for routing.
  
  
.. _envoy_api_field_VirtualHost.domains:

domains
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) A list of domains (host/authority header) that will be matched to this
  virtual host. Wildcard hosts are supported in the form of “*.foo.com” or
  “*-bar.foo.com”.
  
  .. note::
  
    The wildcard will not match the empty string.
    e.g. “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
    Additionally, a special entry “*” is allowed which will match any
    host/authority header. Only a single virtual host in the entire route
    configuration can match on “*”. A domain must be unique across all virtual
    hosts or the config will fail to load.
  
  
.. _envoy_api_field_VirtualHost.routes:

routes
  (:ref:`Route <envoy_api_msg_Route>`) The list of routes that will be matched, in order, for incoming requests.
  The first route that matches will be used.
  
  
.. _envoy_api_field_VirtualHost.require_tls:

require_tls
  (:ref:`VirtualHost.TlsRequirementType <envoy_api_enum_VirtualHost.TlsRequirementType>`) Specifies the type of TLS enforcement the virtual host expects. If this option is not
  specified, there is no TLS requirement for the virtual host.
  
  
.. _envoy_api_field_VirtualHost.virtual_clusters:

virtual_clusters
  (:ref:`VirtualCluster <envoy_api_msg_VirtualCluster>`) A list of virtual clusters defined for this virtual host. Virtual clusters
  are used for additional statistics gathering.
  
  
.. _envoy_api_field_VirtualHost.rate_limits:

rate_limits
  (:ref:`RateLimit <envoy_api_msg_RateLimit>`) Specifies a set of rate limit configurations that will be applied to the
  virtual host.
  
  
.. _envoy_api_field_VirtualHost.request_headers_to_add:

request_headers_to_add
  (:ref:`HeaderValueOption <envoy_api_msg_HeaderValueOption>`) Specifies a list of HTTP headers that should be added to each request
  handled by this virtual host. Headers specified at this level are applied
  after headers from enclosed :ref:`envoy_api_msg_RouteAction` and before headers from the
  enclosing :ref:`envoy_api_msg_RouteConfiguration`. For more information see the documentation
  on :ref:`custom request headers <config_http_conn_man_headers_custom_request_headers>`.
  
  
.. _envoy_api_field_VirtualHost.response_headers_to_add:

response_headers_to_add
  (:ref:`HeaderValueOption <envoy_api_msg_HeaderValueOption>`) Specifies a list of HTTP headers that should be added to each response
  handled by this virtual host. Headers specified at this level are applied
  after headers from enclosed :ref:`envoy_api_msg_RouteAction` and before headers from the
  enclosing :ref:`envoy_api_msg_RouteConfiguration`.
  
  
.. _envoy_api_field_VirtualHost.response_headers_to_remove:

response_headers_to_remove
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies a list of HTTP headers that should be removed from each response
  handle by this virtual host.
  
  
.. _envoy_api_field_VirtualHost.cors:

cors
  (:ref:`CorsPolicy <envoy_api_msg_CorsPolicy>`) Indicates that the virtual host has a CORS policy.
  
  


.. _envoy_api_enum_VirtualHost.TlsRequirementType:

Enum VirtualHost.TlsRequirementType
-----------------------------------

`[VirtualHost.TlsRequirementType proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L110>`_


.. _envoy_api_enum_value_VirtualHost.TlsRequirementType.NONE:

NONE
  *(DEFAULT)* ⁣No TLS requirement for the virtual host.
  
  
.. _envoy_api_enum_value_VirtualHost.TlsRequirementType.EXTERNAL_ONLY:

EXTERNAL_ONLY
  ⁣External requests must use TLS. If a request is external and it is not
  using TLS, a 301 redirect will be sent telling the client to use HTTPS.
  
  
.. _envoy_api_enum_value_VirtualHost.TlsRequirementType.ALL:

ALL
  ⁣All requests must use TLS. If a request is not using TLS, a 301 redirect
  will be sent telling the client to use HTTPS.
  
  

.. _envoy_api_msg_Route:

Route
-----

`[Route proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L167>`_

A route is both a specification of how to match a request as well as an indication of what to do
next (e.g., redirect, forward, rewrite, etc.).

.. attention::

  Envoy supports routing on HTTP method via :ref:`header matching
  <envoy_api_msg_HeaderMatcher>`.

.. code-block:: json

  {
    "match": "{...}",
    "route": "{...}",
    "redirect": "{...}",
    "metadata": "{...}",
    "decorator": "{...}"
  }

.. _envoy_api_field_Route.match:

match
  (:ref:`RouteMatch <envoy_api_msg_RouteMatch>`, *REQUIRED*) Route matching parameters.
  
  
.. _envoy_api_field_Route.route:

route
  (:ref:`RouteAction <envoy_api_msg_RouteAction>`) Route request to some upstream cluster.
  
  
  Precisely one of :ref:`route <envoy_api_field_Route.route>`, :ref:`redirect <envoy_api_field_Route.redirect>` must be set.
  
.. _envoy_api_field_Route.redirect:

redirect
  (:ref:`RedirectAction <envoy_api_msg_RedirectAction>`) Return a redirect.
  
  
  Precisely one of :ref:`route <envoy_api_field_Route.route>`, :ref:`redirect <envoy_api_field_Route.redirect>` must be set.
  
.. _envoy_api_field_Route.metadata:

metadata
  (:ref:`Metadata <envoy_api_msg_Metadata>`) The Metadata field can be used to provide additional information
  about the route. It can be used for configuration, stats, and logging.
  The metadata should go under the filter namespace that will need it.
  For instance, if the metadata is intended for the Router filter,
  the filter name should be specified as *envoy.router*.
  
  
.. _envoy_api_field_Route.decorator:

decorator
  (:ref:`Decorator <envoy_api_msg_Decorator>`) Decorator for the matched route.
  
  



.. _envoy_api_msg_WeightedCluster:

WeightedCluster
---------------

`[WeightedCluster proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L202>`_

Compared to the :ref:`cluster <envoy_api_field_RouteAction.cluster>` field that specifies a
single upstream cluster as the target of a request, the :ref:`weighted_clusters
<envoy_api_field_RouteAction.weighted_clusters>` option allows for specification of
multiple upstream clusters along with weights that indicate the percentage of
traffic to be forwarded to each cluster. The router selects an upstream cluster based on the
weights.

.. code-block:: json

  {
    "clusters": [],
    "runtime_key_prefix": "..."
  }

.. _envoy_api_field_WeightedCluster.clusters:

clusters
  (:ref:`WeightedCluster.ClusterWeight <envoy_api_msg_WeightedCluster.ClusterWeight>`, *REQUIRED*) Specifies one or more upstream clusters associated with the route.
  
  
.. _envoy_api_field_WeightedCluster.runtime_key_prefix:

runtime_key_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the runtime key prefix that should be used to construct the
  runtime keys associated with each cluster. When the *runtime_key_prefix* is
  specified, the router will look for weights associated with each upstream
  cluster under the key *runtime_key_prefix* + "." + *cluster[i].name* where
  *cluster[i]* denotes an entry in the clusters array field. If the runtime
  key for the cluster does not exist, the value specified in the
  configuration file will be used as the default weight. See the :ref:`runtime documentation
  <operations_runtime>` for how key names map to the underlying implementation.
  
  
.. _envoy_api_msg_WeightedCluster.ClusterWeight:

WeightedCluster.ClusterWeight
-----------------------------

`[WeightedCluster.ClusterWeight proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L203>`_


.. code-block:: json

  {
    "name": "...",
    "weight": "{...}",
    "metadata_match": "{...}"
  }

.. _envoy_api_field_WeightedCluster.ClusterWeight.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Name of the upstream cluster. The cluster must exist in the
  :ref:`cluster manager configuration <config_cluster_manager>`.
  
  
.. _envoy_api_field_WeightedCluster.ClusterWeight.weight:

weight
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) An integer between 0-100. When a request matches the route, the choice of
  an upstream cluster is determined by its weight. The sum of weights
  across all entries in the clusters array must add up to 100.
  
  
.. _envoy_api_field_WeightedCluster.ClusterWeight.metadata_match:

metadata_match
  (:ref:`Metadata <envoy_api_msg_Metadata>`) Optional endpoint metadata match criteria. Only endpoints in the upstream
  cluster with metadata matching that set in metadata_match will be
  considered. The filter name should be specified as *envoy.lb*.
  
  



.. _envoy_api_msg_RouteMatch:

RouteMatch
----------

`[RouteMatch proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L233>`_


.. code-block:: json

  {
    "prefix": "...",
    "path": "...",
    "regex": "...",
    "case_sensitive": "{...}",
    "runtime": "{...}",
    "headers": []
  }

.. _envoy_api_field_RouteMatch.prefix:

prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If specified, the route is a prefix rule meaning that the prefix must
  match the beginning of the *:path* header.
  
  
  Precisely one of :ref:`prefix <envoy_api_field_RouteMatch.prefix>`, :ref:`path <envoy_api_field_RouteMatch.path>`, :ref:`regex <envoy_api_field_RouteMatch.regex>` must be set.
  
.. _envoy_api_field_RouteMatch.path:

path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If specified, the route is an exact path rule meaning that the path must
  exactly match the *:path* header once the query string is removed.
  
  
  Precisely one of :ref:`prefix <envoy_api_field_RouteMatch.prefix>`, :ref:`path <envoy_api_field_RouteMatch.path>`, :ref:`regex <envoy_api_field_RouteMatch.regex>` must be set.
  
.. _envoy_api_field_RouteMatch.regex:

regex
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If specified, the route is a regular expression rule meaning that the
  regex must match the *:path* header once the query string is removed. The entire path
  (without the query string) must match the regex. The rule will not match if only a
  subsequence of the *:path* header matches the regex. The regex grammar is defined `here
  <http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
  
  Examples:
  
  * The regex */b[io]t* matches the path */bit*
  * The regex */b[io]t* matches the path */bot*
  * The regex */b[io]t* does not match the path */bite*
  * The regex */b[io]t* does not match the path */bit/bot*
  
  
  Precisely one of :ref:`prefix <envoy_api_field_RouteMatch.prefix>`, :ref:`path <envoy_api_field_RouteMatch.path>`, :ref:`regex <envoy_api_field_RouteMatch.regex>` must be set.
  
.. _envoy_api_field_RouteMatch.case_sensitive:

case_sensitive
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Indicates that prefix/path matching should be case insensitive. The default
  is true.
  
  
.. _envoy_api_field_RouteMatch.runtime:

runtime
  (:ref:`RuntimeUInt32 <envoy_api_msg_RuntimeUInt32>`) Indicates that the route should additionally match on a runtime key. An
  integer between 0-100. Every time the route is considered for a match, a
  random number between 0-99 is selected. If the number is <= the value found
  in the key (checked first) or, if the key is not present, the default
  value, the route is a match (assuming everything also about the route
  matches). A runtime route configuration can be used to roll out route changes in a
  gradual manner without full code/config deploys. Refer to the
  :ref:`traffic shifting <config_http_conn_man_route_table_traffic_splitting_shift>` docs
  for additional documentation.
  
  
.. _envoy_api_field_RouteMatch.headers:

headers
  (:ref:`HeaderMatcher <envoy_api_msg_HeaderMatcher>`) Specifies a set of headers that the route should match on. The router will
  check the request’s headers against all the specified headers in the route
  config. A match will happen if all the headers in the route are present in
  the request with the same values (or based on presence if the value field
  is not in the config).
  
  


.. _envoy_api_msg_CorsPolicy:

CorsPolicy
----------

`[CorsPolicy proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L283>`_


.. code-block:: json

  {
    "allow_origin": [],
    "allow_methods": "...",
    "allow_headers": "...",
    "expose_headers": "...",
    "max_age": "...",
    "allow_credentials": "{...}",
    "enabled": "{...}"
  }

.. _envoy_api_field_CorsPolicy.allow_origin:

allow_origin
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the origins that will be allowed to do CORS requests.
  
  
.. _envoy_api_field_CorsPolicy.allow_methods:

allow_methods
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the content for the *access-control-allow-methods* header.
  
  
.. _envoy_api_field_CorsPolicy.allow_headers:

allow_headers
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the content for the *access-control-allow-headers* header.
  
  
.. _envoy_api_field_CorsPolicy.expose_headers:

expose_headers
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the content for the *access-control-expose-headers* header.
  
  
.. _envoy_api_field_CorsPolicy.max_age:

max_age
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the content for the *access-control-max-age* header.
  
  
.. _envoy_api_field_CorsPolicy.allow_credentials:

allow_credentials
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Specifies whether the resource allows credentials.
  
  
.. _envoy_api_field_CorsPolicy.enabled:

enabled
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Specifies if CORS is enabled. Defaults to true. Only effective on route.
  
  


.. _envoy_api_msg_RouteAction:

RouteAction
-----------

`[RouteAction proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L306>`_


.. code-block:: json

  {
    "cluster": "...",
    "cluster_header": "...",
    "weighted_clusters": "{...}",
    "cluster_not_found_response_code": "...",
    "metadata_match": "{...}",
    "prefix_rewrite": "...",
    "host_rewrite": "...",
    "auto_host_rewrite": "{...}",
    "timeout": "{...}",
    "retry_policy": "{...}",
    "request_mirror_policy": "{...}",
    "priority": "...",
    "request_headers_to_add": [],
    "response_headers_to_add": [],
    "response_headers_to_remove": [],
    "rate_limits": [],
    "include_vh_rate_limits": "{...}",
    "hash_policy": [],
    "use_websocket": "{...}",
    "cors": "{...}"
  }

.. _envoy_api_field_RouteAction.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Indicates the upstream cluster to which the request should be routed
  to.
  
  
  Precisely one of :ref:`cluster <envoy_api_field_RouteAction.cluster>`, :ref:`cluster_header <envoy_api_field_RouteAction.cluster_header>`, :ref:`weighted_clusters <envoy_api_field_RouteAction.weighted_clusters>` must be set.
  
.. _envoy_api_field_RouteAction.cluster_header:

cluster_header
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Envoy will determine the cluster to route to by reading the value of the
  HTTP header named by cluster_header from the request headers. If the
  header is not found or the referenced cluster does not exist, Envoy will
  return a 404 response.
  
  .. attention::
  
    Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1
    *Host* header. Thus, if attempting to match on *Host*, match on *:authority* instead.
  
  
  Precisely one of :ref:`cluster <envoy_api_field_RouteAction.cluster>`, :ref:`cluster_header <envoy_api_field_RouteAction.cluster_header>`, :ref:`weighted_clusters <envoy_api_field_RouteAction.weighted_clusters>` must be set.
  
.. _envoy_api_field_RouteAction.weighted_clusters:

weighted_clusters
  (:ref:`WeightedCluster <envoy_api_msg_WeightedCluster>`) Multiple upstream clusters can be specified for a given route. The
  request is routed to one of the upstream clusters based on weights
  assigned to each cluster. See the
  :ref:`traffic splitting <config_http_conn_man_route_table_traffic_splitting_split>`
  for additional documentation.
  
  
  Precisely one of :ref:`cluster <envoy_api_field_RouteAction.cluster>`, :ref:`cluster_header <envoy_api_field_RouteAction.cluster_header>`, :ref:`weighted_clusters <envoy_api_field_RouteAction.weighted_clusters>` must be set.
  
.. _envoy_api_field_RouteAction.cluster_not_found_response_code:

cluster_not_found_response_code
  (:ref:`RouteAction.ClusterNotFoundResponseCode <envoy_api_enum_RouteAction.ClusterNotFoundResponseCode>`) The HTTP status code to use when configured cluster is not found.
  The default response code is 503 Service Unavailable.
  
  
.. _envoy_api_field_RouteAction.metadata_match:

metadata_match
  (:ref:`Metadata <envoy_api_msg_Metadata>`) Optional endpoint metadata match criteria. Only endpoints in the upstream
  cluster with metadata matching that set in metadata_match will be
  considered. The filter name should be specified as *envoy.lb*.
  
  
.. _envoy_api_field_RouteAction.prefix_rewrite:

prefix_rewrite
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Indicates that during forwarding, the matched prefix (or path) should be
  swapped with this value. This option allows application URLs to be rooted
  at a different path from those exposed at the reverse proxy layer.
  
  
.. _envoy_api_field_RouteAction.host_rewrite:

host_rewrite
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Indicates that during forwarding, the host header will be swapped with
  this value.
  
  
  Only one of :ref:`host_rewrite <envoy_api_field_RouteAction.host_rewrite>`, :ref:`auto_host_rewrite <envoy_api_field_RouteAction.auto_host_rewrite>` may be set.
  
.. _envoy_api_field_RouteAction.auto_host_rewrite:

auto_host_rewrite
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Indicates that during forwarding, the host header will be swapped with
  the hostname of the upstream host chosen by the cluster manager. This
  option is applicable only when the destination cluster for a route is of
  type *strict_dns* or *logical_dns*. Setting this to true with other cluster
  types has no effect.
  
  
  Only one of :ref:`host_rewrite <envoy_api_field_RouteAction.host_rewrite>`, :ref:`auto_host_rewrite <envoy_api_field_RouteAction.auto_host_rewrite>` may be set.
  
.. _envoy_api_field_RouteAction.timeout:

timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Specifies the timeout for the route. If not specified, the default is 15s.
  
  .. note::
  
    This timeout includes all retries. See also
    :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`,
    :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`, and the
    :ref:`retry overview <arch_overview_http_routing_retry>`.
  
  
.. _envoy_api_field_RouteAction.retry_policy:

retry_policy
  (:ref:`RouteAction.RetryPolicy <envoy_api_msg_RouteAction.RetryPolicy>`) Indicates that the route has a retry policy.
  
  
.. _envoy_api_field_RouteAction.request_mirror_policy:

request_mirror_policy
  (:ref:`RouteAction.RequestMirrorPolicy <envoy_api_msg_RouteAction.RequestMirrorPolicy>`) Indicates that the route has a request mirroring policy.
  
  
.. _envoy_api_field_RouteAction.priority:

priority
  (:ref:`RoutingPriority <envoy_api_enum_RoutingPriority>`) Optionally specifies the :ref:`routing priority <arch_overview_http_routing_priority>`.
  
  
.. _envoy_api_field_RouteAction.request_headers_to_add:

request_headers_to_add
  (:ref:`HeaderValueOption <envoy_api_msg_HeaderValueOption>`) Specifies a set of headers that will be added to requests matching this
  route. Headers specified at this level are applied before headers from the
  enclosing :ref:`envoy_api_msg_VirtualHost` and :ref:`envoy_api_msg_RouteConfiguration`.
  For more information see the documentation on :ref:`custom request headers
  <config_http_conn_man_headers_custom_request_headers>`.
  
  
.. _envoy_api_field_RouteAction.response_headers_to_add:

response_headers_to_add
  (:ref:`HeaderValueOption <envoy_api_msg_HeaderValueOption>`) Specifies a set of headers that will be added to responses to requests
  matching this route. Headers specified at this level are applied before
  headers from the enclosing :ref:`envoy_api_msg_VirtualHost` and
  :ref:`envoy_api_msg_RouteConfiguration`.
  
  
.. _envoy_api_field_RouteAction.response_headers_to_remove:

response_headers_to_remove
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies a list of HTTP headers that should be removed from each response
  to requests matching this route.
  
  
.. _envoy_api_field_RouteAction.rate_limits:

rate_limits
  (:ref:`RateLimit <envoy_api_msg_RateLimit>`) Specifies a set of rate limit configurations that could be applied to the
  route.
  
  
.. _envoy_api_field_RouteAction.include_vh_rate_limits:

include_vh_rate_limits
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Specifies if the rate limit filter should include the virtual host rate
  limits. By default, if the route configured rate limits, the virtual host
  :ref:`rate_limits <envoy_api_field_VirtualHost.rate_limits>` are not applied to the request.
  
  
.. _envoy_api_field_RouteAction.hash_policy:

hash_policy
  (:ref:`RouteAction.HashPolicy <envoy_api_msg_RouteAction.HashPolicy>`) Specifies a list of hash policies to use for ring hash load balancing. Each
  hash policy is evaluated individually and the combined result is used to
  route the request. The method of combination is deterministic such that
  identical lists of hash policies will produce the same hash. Since a hash
  policy examines specific parts of a request, it can fail to produce a hash
  (i.e. if the hashed header is not present). If (and only if) all configured
  hash policies fail to generate a hash, no hash will be produced for
  the route. In this case, the behavior is the same as if no hash policies
  were specified (i.e. the ring hash load balancer will choose a random
  backend).
  
  
.. _envoy_api_field_RouteAction.use_websocket:

use_websocket
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Indicates that a HTTP/1.1 client connection to this particular route
  should be allowed (and expected) to upgrade to a WebSocket connection. The
  default is false.
  
  .. attention::
  
    If set to true, Envoy will expect the first request matching this route to
    contain WebSocket upgrade headers. If the headers are not present, the
    connection will be rejected. If set to true, Envoy will setup plain TCP
    proxying between the client and the upstream server. Hence, an upstream
    server that rejects the WebSocket upgrade request is also responsible for
    closing the associated connection. Until then, Envoy will continue to
    proxy data from the client to the upstream server.
  
    Redirects, timeouts and retries are not supported on routes where websocket upgrades are
    allowed.
  
  
.. _envoy_api_field_RouteAction.cors:

cors
  (:ref:`CorsPolicy <envoy_api_msg_CorsPolicy>`) Indicates that the route has a CORS policy.
  
  
.. _envoy_api_msg_RouteAction.RetryPolicy:

RouteAction.RetryPolicy
-----------------------

`[RouteAction.RetryPolicy proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L380>`_

HTTP retry :ref:`architecture overview <arch_overview_http_routing_retry>`.

.. code-block:: json

  {
    "retry_on": "...",
    "num_retries": "{...}",
    "per_try_timeout": "{...}"
  }

.. _envoy_api_field_RouteAction.RetryPolicy.retry_on:

retry_on
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the conditions under which retry takes place. These are the same
  conditions documented for :ref:`config_http_filters_router_x-envoy-retry-on` and
  :ref:`config_http_filters_router_x-envoy-retry-grpc-on`.
  
  
.. _envoy_api_field_RouteAction.RetryPolicy.num_retries:

num_retries
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Specifies the allowed number of retries. This parameter is optional and
  defaults to 1. These are the same conditions documented for
  :ref:`config_http_filters_router_x-envoy-max-retries`.
  
  
.. _envoy_api_field_RouteAction.RetryPolicy.per_try_timeout:

per_try_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Specifies a non-zero timeout per retry attempt. This parameter is optional.
  The same conditions documented for
  :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms` apply.
  
  .. note::
  
    If left unspecified, Envoy will use the global
    :ref:`route timeout <envoy_api_field_RouteAction.timeout>` for the request.
    Consequently, when using a :ref:`5xx <config_http_filters_router_x-envoy-retry-on>` based
    retry policy, a request that times out will not be retried as the total timeout budget
    would have been exhausted.
  
  


.. _envoy_api_msg_RouteAction.RequestMirrorPolicy:

RouteAction.RequestMirrorPolicy
-------------------------------

`[RouteAction.RequestMirrorPolicy proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L415>`_

The router is capable of shadowing traffic from one cluster to another. The current
implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
respond before returning the response from the primary cluster. All normal statistics are
collected for the shadow cluster making this feature useful for testing.

During shadowing, the host/authority header is altered such that *-shadow* is appended. This is
useful for logging. For example, *cluster1* becomes *cluster1-shadow*.

.. code-block:: json

  {
    "cluster": "...",
    "runtime_key": "..."
  }

.. _envoy_api_field_RouteAction.RequestMirrorPolicy.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Specifies the cluster that requests will be mirrored to. The cluster must
  exist in the cluster manager configuration.
  
  
.. _envoy_api_field_RouteAction.RequestMirrorPolicy.runtime_key:

runtime_key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If not specified, all requests to the target cluster will be mirrored. If
  specified, Envoy will lookup the runtime key to get the % of requests to
  mirror. Valid values are from 0 to 10000, allowing for increments of
  0.01% of requests to be mirrored. If the runtime key is specified in the
  configuration but not present in runtime, 0 is the default and thus 0% of
  requests will be mirrored.
  
  


.. _envoy_api_msg_RouteAction.HashPolicy:

RouteAction.HashPolicy
----------------------

`[RouteAction.HashPolicy proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L463>`_

Specifies the route's hashing policy if the upstream cluster uses a hashing :ref:`load balancer
<arch_overview_load_balancing_types>`.

.. code-block:: json

  {
    "header": "{...}",
    "cookie": "{...}",
    "connection_properties": "{...}"
  }

.. _envoy_api_field_RouteAction.HashPolicy.header:

header
  (:ref:`RouteAction.HashPolicy.Header <envoy_api_msg_RouteAction.HashPolicy.Header>`) Header hash policy.
  
  
  Precisely one of :ref:`header <envoy_api_field_RouteAction.HashPolicy.header>`, :ref:`cookie <envoy_api_field_RouteAction.HashPolicy.cookie>`, :ref:`connection_properties <envoy_api_field_RouteAction.HashPolicy.connection_properties>` must be set.
  
.. _envoy_api_field_RouteAction.HashPolicy.cookie:

cookie
  (:ref:`RouteAction.HashPolicy.Cookie <envoy_api_msg_RouteAction.HashPolicy.Cookie>`) Cookie hash policy.
  
  
  Precisely one of :ref:`header <envoy_api_field_RouteAction.HashPolicy.header>`, :ref:`cookie <envoy_api_field_RouteAction.HashPolicy.cookie>`, :ref:`connection_properties <envoy_api_field_RouteAction.HashPolicy.connection_properties>` must be set.
  
.. _envoy_api_field_RouteAction.HashPolicy.connection_properties:

connection_properties
  (:ref:`RouteAction.HashPolicy.ConnectionProperties <envoy_api_msg_RouteAction.HashPolicy.ConnectionProperties>`) Connection properties hash policy.
  
  
  Precisely one of :ref:`header <envoy_api_field_RouteAction.HashPolicy.header>`, :ref:`cookie <envoy_api_field_RouteAction.HashPolicy.cookie>`, :ref:`connection_properties <envoy_api_field_RouteAction.HashPolicy.connection_properties>` must be set.
  
.. _envoy_api_msg_RouteAction.HashPolicy.Header:

RouteAction.HashPolicy.Header
-----------------------------

`[RouteAction.HashPolicy.Header proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L464>`_


.. code-block:: json

  {
    "header_name": "..."
  }

.. _envoy_api_field_RouteAction.HashPolicy.Header.header_name:

header_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the request header that will be used to obtain the hash
  key. If the request header is not present, no hash will be produced.
  
  


.. _envoy_api_msg_RouteAction.HashPolicy.Cookie:

RouteAction.HashPolicy.Cookie
-----------------------------

`[RouteAction.HashPolicy.Cookie proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L484>`_

Envoy supports two types of cookie affinity:

1. Passive. Envoy takes a cookie that's present in the cookies header and
   hashes on its value.

2. Generated. Envoy generates and sets a cookie with an expiration (TTL)
   on the first request from the client in its response to the client,
   based on the endpoint the request gets sent to. The client then
   presents this on the next and all subsequent requests. The hash of
   this is sufficient to ensure these requests get sent to the same
   endpoint. The cookie is generated by hashing the source and
   destination ports and addresses so that multiple independent HTTP2
   streams on the same connection will independently receive the same
   cookie, even if they arrive at the Envoy simultaneously.

.. code-block:: json

  {
    "name": "...",
    "ttl": "{...}"
  }

.. _envoy_api_field_RouteAction.HashPolicy.Cookie.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the cookie that will be used to obtain the hash key. If the
  cookie is not present and ttl below is not set, no hash will be
  produced.
  
  
.. _envoy_api_field_RouteAction.HashPolicy.Cookie.ttl:

ttl
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) If specified, a cookie with the TTL will be generated if the cookie is
  not present.
  
  


.. _envoy_api_msg_RouteAction.HashPolicy.ConnectionProperties:

RouteAction.HashPolicy.ConnectionProperties
-------------------------------------------

`[RouteAction.HashPolicy.ConnectionProperties proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L495>`_


.. code-block:: json

  {
    "source_ip": "..."
  }

.. _envoy_api_field_RouteAction.HashPolicy.ConnectionProperties.source_ip:

source_ip
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Hash on source IP address.
  
  



.. _envoy_api_enum_RouteAction.ClusterNotFoundResponseCode:

Enum RouteAction.ClusterNotFoundResponseCode
--------------------------------------------

`[RouteAction.ClusterNotFoundResponseCode proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L333>`_


.. _envoy_api_enum_value_RouteAction.ClusterNotFoundResponseCode.SERVICE_UNAVAILABLE:

SERVICE_UNAVAILABLE
  *(DEFAULT)* ⁣HTTP status code - 503 Service Unavailable.
  
  
.. _envoy_api_enum_value_RouteAction.ClusterNotFoundResponseCode.NOT_FOUND:

NOT_FOUND
  ⁣HTTP status code - 404 Not Found.
  
  

.. _envoy_api_msg_RedirectAction:

RedirectAction
--------------

`[RedirectAction proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L548>`_


.. code-block:: json

  {
    "host_redirect": "...",
    "path_redirect": "...",
    "response_code": "..."
  }

.. _envoy_api_field_RedirectAction.host_redirect:

host_redirect
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The host portion of the URL will be swapped with this value.
  
  
.. _envoy_api_field_RedirectAction.path_redirect:

path_redirect
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The path portion of the URL will be swapped with this value.
  
  
.. _envoy_api_field_RedirectAction.response_code:

response_code
  (:ref:`RedirectAction.RedirectResponseCode <envoy_api_enum_RedirectAction.RedirectResponseCode>`) The HTTP status code to use in the redirect response. The default response
  code is MOVED_PERMANENTLY (301).
  
  

.. _envoy_api_enum_RedirectAction.RedirectResponseCode:

Enum RedirectAction.RedirectResponseCode
----------------------------------------

`[RedirectAction.RedirectResponseCode proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L555>`_


.. _envoy_api_enum_value_RedirectAction.RedirectResponseCode.MOVED_PERMANENTLY:

MOVED_PERMANENTLY
  *(DEFAULT)* ⁣Moved Permanently HTTP Status Code - 301.
  
  
.. _envoy_api_enum_value_RedirectAction.RedirectResponseCode.FOUND:

FOUND
  ⁣Found HTTP Status Code - 302.
  
  
.. _envoy_api_enum_value_RedirectAction.RedirectResponseCode.SEE_OTHER:

SEE_OTHER
  ⁣See Other HTTP Status Code - 303.
  
  
.. _envoy_api_enum_value_RedirectAction.RedirectResponseCode.TEMPORARY_REDIRECT:

TEMPORARY_REDIRECT
  ⁣Temporary Redirect HTTP Status Code - 307.
  
  
.. _envoy_api_enum_value_RedirectAction.RedirectResponseCode.PERMANENT_REDIRECT:

PERMANENT_REDIRECT
  ⁣Permanent Redirect HTTP Status Code - 308.
  
  

.. _envoy_api_msg_Decorator:

Decorator
---------

`[Decorator proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L577>`_


.. code-block:: json

  {
    "operation": "..."
  }

.. _envoy_api_field_Decorator.operation:

operation
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The operation name associated with the request matched to this route. If tracing is
  enabled, this information will be used as the span name reported for this request.
  
  .. note::
  
    For ingress (inbound) requests, or egress (outbound) responses, this value may be overridden
    by the :ref:`x-envoy-decorator-operation
    <config_http_filters_router_x-envoy-decorator-operation>` header.
  
  


.. _envoy_api_msg_VirtualCluster:

VirtualCluster
--------------

`[VirtualCluster proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L606>`_

A virtual cluster is a way of specifying a regex matching rule against
certain important endpoints such that statistics are generated explicitly for
the matched requests. The reason this is useful is that when doing
prefix/path matching Envoy does not always know what the application
considers to be an endpoint. Thus, it’s impossible for Envoy to generically
emit per endpoint statistics. However, often systems have highly critical
endpoints that they wish to get “perfect” statistics on. Virtual cluster
statistics are perfect in the sense that they are emitted on the downstream
side such that they include network level failures.

Documentation for :ref:`virtual cluster statistics <config_http_filters_router_stats>`.

.. note::

   Virtual clusters are a useful tool, but we do not recommend setting up a virtual cluster for
   every application endpoint. This is both not easily maintainable and as well the matching and
   statistics output are not free.

.. code-block:: json

  {
    "pattern": "...",
    "name": "...",
    "method": "..."
  }

.. _envoy_api_field_VirtualCluster.pattern:

pattern
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Specifies a regex pattern to use for matching requests. The entire path of the request
  must match the regex. The regex grammar used is defined `here
  <http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
  
  Examples:
  
  * The regex */rides/\d+* matches the path */rides/0*
  * The regex */rides/\d+* matches the path */rides/123*
  * The regex */rides/\d+* does not match the path */rides/123/456*
  
  
.. _envoy_api_field_VirtualCluster.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*)  Specifies the name of the virtual cluster. The virtual cluster name as well
  as the virtual host name are used when emitting statistics. The statistics are emitted by the
  router filter and are documented :ref:`here <config_http_filters_router_stats>`.
  
  
.. _envoy_api_field_VirtualCluster.method:

method
  (:ref:`RequestMethod <envoy_api_enum_RequestMethod>`) Optionally specifies the HTTP method to match on. For example GET, PUT,
  etc.
  
  


.. _envoy_api_msg_RateLimit:

RateLimit
---------

`[RateLimit proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L629>`_

Global rate limiting :ref:`architecture overview <arch_overview_rate_limit>`.

.. code-block:: json

  {
    "stage": "{...}",
    "disable_key": "...",
    "actions": []
  }

.. _envoy_api_field_RateLimit.stage:

stage
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Refers to the stage set in the filter. The rate limit configuration only
  applies to filters with the same stage number. The default stage number is
  0.
  
  .. note::
  
    The filter supports a range of 0 - 10 inclusively for stage numbers.
  
  
.. _envoy_api_field_RateLimit.disable_key:

disable_key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The key to be set in runtime to disable this rate limit configuration.
  
  
.. _envoy_api_field_RateLimit.actions:

actions
  (:ref:`RateLimit.Action <envoy_api_msg_RateLimit.Action>`, *REQUIRED*) A list of actions that are to be applied for this rate limit configuration.
  Order matters as the actions are processed sequentially and the descriptor
  is composed by appending descriptor entries in that sequence. If an action
  cannot append a descriptor entry, no descriptor is generated for the
  configuration. See :ref:`composing actions
  <config_http_filters_rate_limit_composing_actions>` for additional documentation.
  
  
.. _envoy_api_msg_RateLimit.Action:

RateLimit.Action
----------------

`[RateLimit.Action proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L642>`_


.. code-block:: json

  {
    "source_cluster": "{...}",
    "destination_cluster": "{...}",
    "request_headers": "{...}",
    "remote_address": "{...}",
    "generic_key": "{...}",
    "header_value_match": "{...}"
  }

.. _envoy_api_field_RateLimit.Action.source_cluster:

source_cluster
  (:ref:`RateLimit.Action.SourceCluster <envoy_api_msg_RateLimit.Action.SourceCluster>`) Rate limit on source cluster.
  
  
  Precisely one of :ref:`source_cluster <envoy_api_field_RateLimit.Action.source_cluster>`, :ref:`destination_cluster <envoy_api_field_RateLimit.Action.destination_cluster>`, :ref:`request_headers <envoy_api_field_RateLimit.Action.request_headers>`, :ref:`remote_address <envoy_api_field_RateLimit.Action.remote_address>`, :ref:`generic_key <envoy_api_field_RateLimit.Action.generic_key>`, :ref:`header_value_match <envoy_api_field_RateLimit.Action.header_value_match>` must be set.
  
.. _envoy_api_field_RateLimit.Action.destination_cluster:

destination_cluster
  (:ref:`RateLimit.Action.DestinationCluster <envoy_api_msg_RateLimit.Action.DestinationCluster>`) Rate limit on destination cluster.
  
  
  Precisely one of :ref:`source_cluster <envoy_api_field_RateLimit.Action.source_cluster>`, :ref:`destination_cluster <envoy_api_field_RateLimit.Action.destination_cluster>`, :ref:`request_headers <envoy_api_field_RateLimit.Action.request_headers>`, :ref:`remote_address <envoy_api_field_RateLimit.Action.remote_address>`, :ref:`generic_key <envoy_api_field_RateLimit.Action.generic_key>`, :ref:`header_value_match <envoy_api_field_RateLimit.Action.header_value_match>` must be set.
  
.. _envoy_api_field_RateLimit.Action.request_headers:

request_headers
  (:ref:`RateLimit.Action.RequestHeaders <envoy_api_msg_RateLimit.Action.RequestHeaders>`) Rate limit on request headers.
  
  
  Precisely one of :ref:`source_cluster <envoy_api_field_RateLimit.Action.source_cluster>`, :ref:`destination_cluster <envoy_api_field_RateLimit.Action.destination_cluster>`, :ref:`request_headers <envoy_api_field_RateLimit.Action.request_headers>`, :ref:`remote_address <envoy_api_field_RateLimit.Action.remote_address>`, :ref:`generic_key <envoy_api_field_RateLimit.Action.generic_key>`, :ref:`header_value_match <envoy_api_field_RateLimit.Action.header_value_match>` must be set.
  
.. _envoy_api_field_RateLimit.Action.remote_address:

remote_address
  (:ref:`RateLimit.Action.RemoteAddress <envoy_api_msg_RateLimit.Action.RemoteAddress>`) Rate limit on remote address.
  
  
  Precisely one of :ref:`source_cluster <envoy_api_field_RateLimit.Action.source_cluster>`, :ref:`destination_cluster <envoy_api_field_RateLimit.Action.destination_cluster>`, :ref:`request_headers <envoy_api_field_RateLimit.Action.request_headers>`, :ref:`remote_address <envoy_api_field_RateLimit.Action.remote_address>`, :ref:`generic_key <envoy_api_field_RateLimit.Action.generic_key>`, :ref:`header_value_match <envoy_api_field_RateLimit.Action.header_value_match>` must be set.
  
.. _envoy_api_field_RateLimit.Action.generic_key:

generic_key
  (:ref:`RateLimit.Action.GenericKey <envoy_api_msg_RateLimit.Action.GenericKey>`) Rate limit on a generic key.
  
  
  Precisely one of :ref:`source_cluster <envoy_api_field_RateLimit.Action.source_cluster>`, :ref:`destination_cluster <envoy_api_field_RateLimit.Action.destination_cluster>`, :ref:`request_headers <envoy_api_field_RateLimit.Action.request_headers>`, :ref:`remote_address <envoy_api_field_RateLimit.Action.remote_address>`, :ref:`generic_key <envoy_api_field_RateLimit.Action.generic_key>`, :ref:`header_value_match <envoy_api_field_RateLimit.Action.header_value_match>` must be set.
  
.. _envoy_api_field_RateLimit.Action.header_value_match:

header_value_match
  (:ref:`RateLimit.Action.HeaderValueMatch <envoy_api_msg_RateLimit.Action.HeaderValueMatch>`) Rate limit on the existence of request headers.
  
  
  Precisely one of :ref:`source_cluster <envoy_api_field_RateLimit.Action.source_cluster>`, :ref:`destination_cluster <envoy_api_field_RateLimit.Action.destination_cluster>`, :ref:`request_headers <envoy_api_field_RateLimit.Action.request_headers>`, :ref:`remote_address <envoy_api_field_RateLimit.Action.remote_address>`, :ref:`generic_key <envoy_api_field_RateLimit.Action.generic_key>`, :ref:`header_value_match <envoy_api_field_RateLimit.Action.header_value_match>` must be set.
  
.. _envoy_api_msg_RateLimit.Action.SourceCluster:

RateLimit.Action.SourceCluster
------------------------------

`[RateLimit.Action.SourceCluster proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L650>`_

The following descriptor entry is appended to the descriptor:

.. code-block:: cpp

  ("source_cluster", "<local service cluster>")

<local service cluster> is derived from the :option:`--service-cluster` option.

.. code-block:: json

  {}




.. _envoy_api_msg_RateLimit.Action.DestinationCluster:

RateLimit.Action.DestinationCluster
-----------------------------------

`[RateLimit.Action.DestinationCluster proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L669>`_

The following descriptor entry is appended to the descriptor:

.. code-block:: cpp

  ("destination_cluster", "<routed target cluster>")

Once a request matches against a route table rule, a routed cluster is determined by one of
the following :ref:`route table configuration <envoy_api_msg_RouteConfiguration>`
settings:

* :ref:`cluster <envoy_api_field_RouteAction.cluster>` indicates the upstream cluster
  to route to.
* :ref:`weighted_clusters <envoy_api_field_RouteAction.weighted_clusters>`
  chooses a cluster randomly from a set of clusters with attributed weight.
* :ref:`cluster_header <envoy_api_field_RouteAction.cluster_header>` indicates which
  header in the request contains the target cluster.

.. code-block:: json

  {}




.. _envoy_api_msg_RateLimit.Action.RequestHeaders:

RateLimit.Action.RequestHeaders
-------------------------------

`[RateLimit.Action.RequestHeaders proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L678>`_

The following descriptor entry is appended when a header contains a key that matches the
*header_name*:

.. code-block:: cpp

  ("<descriptor_key>", "<header_value_queried_from_header>")

.. code-block:: json

  {
    "header_name": "...",
    "descriptor_key": "..."
  }

.. _envoy_api_field_RateLimit.Action.RequestHeaders.header_name:

header_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The header name to be queried from the request headers. The header’s
  value is used to populate the value of the descriptor entry for the
  descriptor_key.
  
  
.. _envoy_api_field_RateLimit.Action.RequestHeaders.descriptor_key:

descriptor_key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The key to use in the descriptor entry.
  
  


.. _envoy_api_msg_RateLimit.Action.RemoteAddress:

RateLimit.Action.RemoteAddress
------------------------------

`[RateLimit.Action.RemoteAddress proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L694>`_

The following descriptor entry is appended to the descriptor and is populated using the
trusted address from :ref:`x-forwarded-for <config_http_conn_man_headers_x-forwarded-for>`:

.. code-block:: cpp

  ("remote_address", "<trusted address from x-forwarded-for>")

.. code-block:: json

  {}




.. _envoy_api_msg_RateLimit.Action.GenericKey:

RateLimit.Action.GenericKey
---------------------------

`[RateLimit.Action.GenericKey proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L702>`_

The following descriptor entry is appended to the descriptor:

.. code-block:: cpp

  ("generic_key", "<descriptor_value>")

.. code-block:: json

  {
    "descriptor_value": "..."
  }

.. _envoy_api_field_RateLimit.Action.GenericKey.descriptor_value:

descriptor_value
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The value to use in the descriptor entry.
  
  


.. _envoy_api_msg_RateLimit.Action.HeaderValueMatch:

RateLimit.Action.HeaderValueMatch
---------------------------------

`[RateLimit.Action.HeaderValueMatch proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L712>`_

The following descriptor entry is appended to the descriptor:

.. code-block:: cpp

  ("header_match", "<descriptor_value>")

.. code-block:: json

  {
    "descriptor_value": "...",
    "expect_match": "{...}",
    "headers": []
  }

.. _envoy_api_field_RateLimit.Action.HeaderValueMatch.descriptor_value:

descriptor_value
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The value to use in the descriptor entry.
  
  
.. _envoy_api_field_RateLimit.Action.HeaderValueMatch.expect_match:

expect_match
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) If set to true, the action will append a descriptor entry when the
  request matches the headers. If set to false, the action will append a
  descriptor entry when the request does not match the headers. The
  default value is true.
  
  
.. _envoy_api_field_RateLimit.Action.HeaderValueMatch.headers:

headers
  (:ref:`HeaderMatcher <envoy_api_msg_HeaderMatcher>`, *REQUIRED*) Specifies a set of headers that the rate limit action should match
  on. The action will check the request’s headers against all the
  specified headers in the config. A match will happen if all the
  headers in the config are present in the request with the same values
  (or based on presence if the value field is not in the config).
  
  




.. _envoy_api_msg_HeaderMatcher:

HeaderMatcher
-------------

`[HeaderMatcher proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/rds.proto#L778>`_

.. attention::

  Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*
  header. Thus, if attempting to match on *Host*, match on *:authority* instead.

.. attention::

  To route on HTTP method, use the special HTTP/2 *:method* header. This works for both
  HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,

  .. code-block:: json

    {
      "name": ":method",
      "value": "POST"
    }

.. code-block:: json

  {
    "name": "...",
    "value": "...",
    "regex": "{...}"
  }

.. _envoy_api_field_HeaderMatcher.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Specifies the name of the header in the request.
  
  
.. _envoy_api_field_HeaderMatcher.value:

value
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the value of the header. If the value is absent a request that
  has the name header will match, regardless of the header’s value.
  
  
.. _envoy_api_field_HeaderMatcher.regex:

regex
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Specifies whether the header value is a regular
  expression or not. Defaults to false. The entire request header value must match the regex. The
  rule will not match if only a subsequence of the request header value matches the regex. The
  regex grammar used in the value field is defined
  `here <http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
  
  Examples:
  
  * The regex *\d{3}* matches the value *123*
  * The regex *\d{3}* does not match the value *1234*
  * The regex *\d{3}* does not match the value *123.456*
  
  

