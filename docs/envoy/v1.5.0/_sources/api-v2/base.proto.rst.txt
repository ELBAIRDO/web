.. _envoy_api_file_api/base.proto:

Common types
============


.. _envoy_api_msg_Locality:

Locality
--------

`[Locality proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L16>`_

Identifies location of where either Envoy runs or where upstream hosts run.

.. code-block:: json

  {
    "region": "...",
    "zone": "...",
    "sub_zone": "..."
  }

.. _envoy_api_field_Locality.region:

region
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Region this :ref:`zone <envoy_api_field_Locality.zone>` belongs to.
  
  
.. _envoy_api_field_Locality.zone:

zone
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) `Availability Zone (AZ)
  <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
  on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
  GCP, etc.
  
  
.. _envoy_api_field_Locality.sub_zone:

sub_zone
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) When used for locality of upstream hosts, this field further splits zone
  into smaller chunks of sub-zones so they can be load balanced
  independently.
  
  


.. _envoy_api_msg_Node:

Node
----

`[Node proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L35>`_

Identifies a specific Envoy instance. The node identifier is presented to the
management server, which may use this identifier to distinguish per Envoy
configuration for serving.

.. code-block:: json

  {
    "id": "...",
    "cluster": "...",
    "metadata": "{...}",
    "locality": "{...}",
    "build_version": "..."
  }

.. _envoy_api_field_Node.id:

id
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) An opaque node identifier for the Envoy node.
  
  
.. _envoy_api_field_Node.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The cluster that the Envoy node belongs to.
  
  
.. _envoy_api_field_Node.metadata:

metadata
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Opaque metadata extending the node identifier. Envoy will pass this
  directly to the management server.
  
  
.. _envoy_api_field_Node.locality:

locality
  (:ref:`Locality <envoy_api_msg_Locality>`) Locality specifying where the Envoy instance is running.
  
  
.. _envoy_api_field_Node.build_version:

build_version
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) This is motivated by informing a management server during canary which
  version of Envoy is being tested in a heterogeneous fleet. This will be set
  by Envoy in management server RPCs.
  
  


.. _envoy_api_msg_Endpoint:

Endpoint
--------

`[Endpoint proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L52>`_

Upstream host identifier.

.. code-block:: json

  {
    "address": "{...}"
  }

.. _envoy_api_field_Endpoint.address:

address
  (:ref:`Address <envoy_api_msg_Address>`) 
  


.. _envoy_api_msg_Metadata:

Metadata
--------

`[Metadata proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L74>`_

Metadata provides additional inputs to filters based on matched listeners,
filter chains, routes and endpoints. It is structured as a map from filter
name (in reverse DNS format) to metadata specific to the filter. Metadata
key-values for a filter are merged as connection and request handling occurs,
with later values for the same key overriding earlier values.

An example use of metadata is providing additional values to
http_connection_manager in the envoy.http_connection_manager.access_log
namespace.

For load balancing, Metadata provides a means to subset cluster endpoints.
Endpoints have a Metadata object associated and routes contain a Metadata
object to match against. There are some well defined metadata used today for
this purpose:

* ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
  endpoint and is also used during header processing
  (x-envoy-upstream-canary) and for stats purposes.

.. code-block:: json

  {
    "filter_metadata": "{...}"
  }

.. _envoy_api_field_Metadata.filter_metadata:

filter_metadata
  (map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, `Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_>) Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
  namespace is reserved for Envoy's built-in filters.
  
  


.. _envoy_api_msg_RuntimeUInt32:

RuntimeUInt32
-------------

`[RuntimeUInt32 proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L81>`_

Runtime derived uint32 with a default when not specified.

.. code-block:: json

  {
    "default_value": "...",
    "runtime_key": "..."
  }

.. _envoy_api_field_RuntimeUInt32.default_value:

default_value
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Default value if runtime value is not available.
  
  
.. _envoy_api_field_RuntimeUInt32.runtime_key:

runtime_key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Runtime key to get value for comparison. This value is used if defined.
  
  


.. _envoy_api_msg_HeaderValue:

HeaderValue
-----------

`[HeaderValue proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L115>`_

Header name/value pair.

.. code-block:: json

  {
    "key": "...",
    "value": "..."
  }

.. _envoy_api_field_HeaderValue.key:

key
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Header name.
  
  
.. _envoy_api_field_HeaderValue.value:

value
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Header value.
  
  The same :ref:`format specifier <config_access_log_format>` as used for
  :ref:`HTTP access logging <config_access_log>` applies here, however
  unknown header values are replaced with the empty string instead of `-`.
  
  


.. _envoy_api_msg_HeaderValueOption:

HeaderValueOption
-----------------

`[HeaderValueOption proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L128>`_

Header name/value pair plus option to control append behavior.

.. code-block:: json

  {
    "header": "{...}",
    "append": "{...}"
  }

.. _envoy_api_field_HeaderValueOption.header:

header
  (:ref:`HeaderValue <envoy_api_msg_HeaderValue>`) Header name/value pair that this option applies to.
  
  
.. _envoy_api_field_HeaderValueOption.append:

append
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Should the value be appended? If true (default), the value is appended to
  existing values.
  
  


.. _envoy_api_msg_ApiConfigSource:

ApiConfigSource
---------------

`[ApiConfigSource proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L139>`_

API configuration source. This identifies the API type and cluster that Envoy
will use to fetch an xDS API.

.. code-block:: json

  {
    "api_type": "...",
    "cluster_name": [],
    "refresh_delay": "{...}"
  }

.. _envoy_api_field_ApiConfigSource.api_type:

api_type
  (:ref:`ApiConfigSource.ApiType <envoy_api_enum_ApiConfigSource.ApiType>`) 
  
.. _envoy_api_field_ApiConfigSource.cluster_name:

cluster_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Multiple cluster names may be provided. If > 1 cluster is defined, clusters
  will be cycled through if any kind of failure occurs.
  
  
.. _envoy_api_field_ApiConfigSource.refresh_delay:

refresh_delay
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) For REST APIs, the delay between successive polls.
  
  

.. _envoy_api_enum_ApiConfigSource.ApiType:

Enum ApiConfigSource.ApiType
----------------------------

`[ApiConfigSource.ApiType proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L141>`_

APIs may be fetched via either REST or gRPC.

.. _envoy_api_enum_value_ApiConfigSource.ApiType.REST_LEGACY:

REST_LEGACY
  *(DEFAULT)* ⁣REST-JSON legacy corresponds to the v1 API.
  
  
.. _envoy_api_enum_value_ApiConfigSource.ApiType.REST:

REST
  ⁣REST-JSON v2 API. The `canonical JSON encoding
  <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
  the v2 protos is used.
  
  
.. _envoy_api_enum_value_ApiConfigSource.ApiType.GRPC:

GRPC
  ⁣gRPC v2 API.
  
  

.. _envoy_api_msg_AggregatedConfigSource:

AggregatedConfigSource
----------------------

`[AggregatedConfigSource proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L162>`_

Aggregated Discovery Service (ADS) options. This is currently empty, but when
set in :ref:`ConfigSource <envoy_api_msg_ConfigSource>` can be used to
specify that ADS is to be used.

.. code-block:: json

  {}




.. _envoy_api_msg_ConfigSource:

ConfigSource
------------

`[ConfigSource proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L171>`_

Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
<config_cluster_manager_cluster>`, :ref:`routes
<config_http_conn_man_route_table>`, :ref:`endpoints
<arch_overview_service_discovery>` etc. may either be sourced from the
filesystem or from an xDS API source. Filesystem configs are watched with
inotify for updates.

.. code-block:: json

  {
    "path": "...",
    "api_config_source": "{...}",
    "ads": "{...}"
  }

.. _envoy_api_field_ConfigSource.path:

path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Path on the filesystem to source and watch for configuration updates.
  
  
  Precisely one of :ref:`path <envoy_api_field_ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_ConfigSource.ads>` must be set.
  
.. _envoy_api_field_ConfigSource.api_config_source:

api_config_source
  (:ref:`ApiConfigSource <envoy_api_msg_ApiConfigSource>`) API configuration source.
  
  
  Precisely one of :ref:`path <envoy_api_field_ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_ConfigSource.ads>` must be set.
  
.. _envoy_api_field_ConfigSource.ads:

ads
  (:ref:`AggregatedConfigSource <envoy_api_msg_AggregatedConfigSource>`) When set, ADS will be used to fetch resources. The ADS API configuration
  source in the bootstrap configuration is used.
  
  
  Precisely one of :ref:`path <envoy_api_field_ConfigSource.path>`, :ref:`api_config_source <envoy_api_field_ConfigSource.api_config_source>`, :ref:`ads <envoy_api_field_ConfigSource.ads>` must be set.
  


.. _envoy_api_msg_TransportSocket:

TransportSocket
---------------

`[TransportSocket proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L188>`_

Configuration for transport socket in :ref:`listeners <config_listeners>` and
:ref:`clusters <config_cluster_manager_cluster>`. If the configuration is
empty, a default transport socket implementation and configuration will be
chosen based on the platform and existence of tls_context.

.. code-block:: json

  {
    "name": "...",
    "config": "{...}"
  }

.. _envoy_api_field_TransportSocket.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the transport socket to instantiate. The name must match a supported transport
  socket implementation.
  
  
.. _envoy_api_field_TransportSocket.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Implementation specific configuration which depends on the implementation being instantiated.
  See the supported transport socket implementations for further documentation.
  
  

.. _envoy_api_enum_RoutingPriority:

Enum RoutingPriority
--------------------

`[RoutingPriority proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L96>`_

Envoy supports :ref:`upstream priority routing
<arch_overview_http_routing_priority>` both at the route and the virtual
cluster level. The current priority implementation uses different connection
pool and circuit breaking settings for each priority level. This means that
even for HTTP/2 requests, two physical connections will be used to an
upstream host. In the future Envoy will likely support true HTTP/2 priority
over a single upstream connection.

.. _envoy_api_enum_value_RoutingPriority.DEFAULT:

DEFAULT
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_RoutingPriority.HIGH:

HIGH
  ⁣
  

.. _envoy_api_enum_RequestMethod:

Enum RequestMethod
------------------

`[RequestMethod proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/base.proto#L102>`_

HTTP request method.

.. _envoy_api_enum_value_RequestMethod.METHOD_UNSPECIFIED:

METHOD_UNSPECIFIED
  *(DEFAULT)* ⁣
  
.. _envoy_api_enum_value_RequestMethod.GET:

GET
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.HEAD:

HEAD
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.POST:

POST
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.PUT:

PUT
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.DELETE:

DELETE
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.CONNECT:

CONNECT
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.OPTIONS:

OPTIONS
  ⁣
  
.. _envoy_api_enum_value_RequestMethod.TRACE:

TRACE
  ⁣
  
