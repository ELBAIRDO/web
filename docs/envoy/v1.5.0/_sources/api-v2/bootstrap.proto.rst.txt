.. _envoy_api_file_api/bootstrap.proto:

Bootstrap
=========

This proto is supplied via the :option:`-c` CLI flag and acts as the root
of the Envoy v2 configuration. See the :ref:`v2 configuration overview
<config_overview_v2_bootstrap>` for more detail.

.. _envoy_api_msg_Bootstrap:

Bootstrap
---------

`[Bootstrap proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L22>`_

Bootstrap :ref:`configuration overview <config_overview_v2_bootstrap>`.

.. code-block:: json

  {
    "node": "{...}",
    "static_resources": "{...}",
    "dynamic_resources": "{...}",
    "cluster_manager": "{...}",
    "flags_path": "...",
    "stats_sinks": [],
    "stats_config": "{...}",
    "stats_flush_interval": "{...}",
    "watchdog": "{...}",
    "tracing": "{...}",
    "rate_limit_service": "{...}",
    "runtime": "{...}",
    "admin": "{...}"
  }

.. _envoy_api_field_Bootstrap.node:

node
  (:ref:`Node <envoy_api_msg_Node>`) Node identity to present to the management server and for instance
  identification purposes (e.g. in generated headers).
  
  
.. _envoy_api_field_Bootstrap.static_resources:

static_resources
  (:ref:`Bootstrap.StaticResources <envoy_api_msg_Bootstrap.StaticResources>`) Statically specified resources.
  
  
.. _envoy_api_field_Bootstrap.dynamic_resources:

dynamic_resources
  (:ref:`Bootstrap.DynamicResources <envoy_api_msg_Bootstrap.DynamicResources>`) xDS configuration sources.
  
  
.. _envoy_api_field_Bootstrap.cluster_manager:

cluster_manager
  (:ref:`ClusterManager <envoy_api_msg_ClusterManager>`) Configuration for the cluster manager which owns all upstream clusters
  within the server.
  
  
.. _envoy_api_field_Bootstrap.flags_path:

flags_path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Optional file system path to search for startup flag files.
  
  
.. _envoy_api_field_Bootstrap.stats_sinks:

stats_sinks
  (:ref:`StatsSink <envoy_api_msg_StatsSink>`) Optional set of stats sinks.
  
  
.. _envoy_api_field_Bootstrap.stats_config:

stats_config
  (:ref:`StatsConfig <envoy_api_msg_StatsConfig>`) Configuration for internal processing of stats.
  
  
.. _envoy_api_field_Bootstrap.stats_flush_interval:

stats_flush_interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Optional duration between flushes to configured stats sinks. For
  performance reasons Envoy latches counters and only flushes counters and
  gauges at a periodic interval. If not specified the default is 5000ms (5
  seconds).
  
  
.. _envoy_api_field_Bootstrap.watchdog:

watchdog
  (:ref:`Watchdog <envoy_api_msg_Watchdog>`) Optional watchdog configuration.
  
  
.. _envoy_api_field_Bootstrap.tracing:

tracing
  (:ref:`Tracing <envoy_api_msg_Tracing>`) Configuration for an external tracing provider. If not specified, no
  tracing will be performed.
  
  
.. _envoy_api_field_Bootstrap.rate_limit_service:

rate_limit_service
  (:ref:`RateLimitServiceConfig <envoy_api_msg_RateLimitServiceConfig>`) Configuration for an external rate limit service provider. If not
  specified, any calls to the rate limit service will immediately return
  success.
  
  
.. _envoy_api_field_Bootstrap.runtime:

runtime
  (:ref:`Runtime <envoy_api_msg_Runtime>`) Configuration for the runtime configuration provider. If not specified, a
  “null” provider will be used which will result in all defaults being used.
  
  
.. _envoy_api_field_Bootstrap.admin:

admin
  (:ref:`Admin <envoy_api_msg_Admin>`, *REQUIRED*) Configuration for the local administration HTTP server.
  
  
.. _envoy_api_msg_Bootstrap.StaticResources:

Bootstrap.StaticResources
-------------------------

`[Bootstrap.StaticResources proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L27>`_


.. code-block:: json

  {
    "listeners": [],
    "clusters": []
  }

.. _envoy_api_field_Bootstrap.StaticResources.listeners:

listeners
  (:ref:`Listener <envoy_api_msg_Listener>`) Static :ref:`Listeners <envoy_api_msg_Listener>`. These listeners are
  available regardless of LDS configuration.
  
  
.. _envoy_api_field_Bootstrap.StaticResources.clusters:

clusters
  (:ref:`Cluster <envoy_api_msg_Cluster>`) If a network based configuration source is specified for :ref:`cds_config
  <envoy_api_field_Bootstrap.DynamicResources.cds_config>`, it's necessary
  to have some initial cluster definitions available to allow Envoy to know
  how to speak to the management server. These cluster definitions may not
  use :ref:`EDS <arch_overview_dynamic_config_sds>` (i.e. they should be static
  IP or DNS-based).
  
  



.. _envoy_api_msg_Bootstrap.DynamicResources:

Bootstrap.DynamicResources
--------------------------

`[Bootstrap.DynamicResources proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L46>`_


.. code-block:: json

  {
    "lds_config": "{...}",
    "cds_config": "{...}",
    "ads_config": "{...}",
    "deprecated_v1": "{...}"
  }

.. _envoy_api_field_Bootstrap.DynamicResources.lds_config:

lds_config
  (:ref:`ConfigSource <envoy_api_msg_ConfigSource>`) All :ref:`Listeners <envoy_api_msg_Listener>` are provided by a single
  :ref:`LDS <arch_overview_dynamic_config_lds>` configuration source.
  
  
.. _envoy_api_field_Bootstrap.DynamicResources.cds_config:

cds_config
  (:ref:`ConfigSource <envoy_api_msg_ConfigSource>`) All post-bootstrap :ref:`Cluster <envoy_api_msg_Cluster>` definitions are
  provided by a single :ref:`CDS <arch_overview_dynamic_config_cds>`
  configuration source.
  
  
.. _envoy_api_field_Bootstrap.DynamicResources.ads_config:

ads_config
  (:ref:`ApiConfigSource <envoy_api_msg_ApiConfigSource>`) A single :ref:`ADS <config_overview_v2_ads>` source may be optionally
  specified. This must have :ref:`api_type
  <envoy_api_field_ApiConfigSource.api_type>` :ref:`GRPC
  <envoy_api_enum_value_ApiConfigSource.ApiType.GRPC>`. Only
  :ref:`ConfigSources <envoy_api_msg_ConfigSource>` that have
  the :ref:`ads <envoy_api_field_ConfigSource.ads>` field set will be
  streamed on the ADS channel.
  
  
.. _envoy_api_field_Bootstrap.DynamicResources.deprecated_v1:

deprecated_v1
  (:ref:`Bootstrap.DynamicResources.DeprecatedV1 <envoy_api_msg_Bootstrap.DynamicResources.DeprecatedV1>`) 
  
.. _envoy_api_msg_Bootstrap.DynamicResources.DeprecatedV1:

Bootstrap.DynamicResources.DeprecatedV1
---------------------------------------

`[Bootstrap.DynamicResources.DeprecatedV1 proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L65>`_


.. code-block:: json

  {
    "sds_config": "{...}"
  }

.. _envoy_api_field_Bootstrap.DynamicResources.DeprecatedV1.sds_config:

sds_config
  (:ref:`ConfigSource <envoy_api_msg_ConfigSource>`) This is the global :ref:`SDS <arch_overview_dynamic_config_sds>` config
  when using v1 REST for :ref:`CDS
  <arch_overview_dynamic_config_cds>`/:ref:`EDS
  <arch_overview_dynamic_config_sds>`.
  
  




.. _envoy_api_msg_LightstepConfig:

LightstepConfig
---------------

`[LightstepConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L117>`_

Configuration for the LightStep tracer.

.. code-block:: json

  {
    "collector_cluster": "...",
    "access_token_file": "..."
  }

.. _envoy_api_field_LightstepConfig.collector_cluster:

collector_cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The cluster manager cluster that hosts the LightStep collectors.
  
  
.. _envoy_api_field_LightstepConfig.access_token_file:

access_token_file
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) File containing the access token to the `LightStep
  <http://lightstep.com/>`_ API.
  
  


.. _envoy_api_msg_ZipkinConfig:

ZipkinConfig
------------

`[ZipkinConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L126>`_


.. code-block:: json

  {
    "collector_cluster": "...",
    "collector_endpoint": "..."
  }

.. _envoy_api_field_ZipkinConfig.collector_cluster:

collector_cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The cluster manager cluster that hosts the Zipkin collectors. Note that the
  Zipkin cluster must be defined in the :ref:`Bootstrap static cluster
  resources <envoy_api_field_Bootstrap.StaticResources.clusters>`.
  
  
.. _envoy_api_field_ZipkinConfig.collector_endpoint:

collector_endpoint
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The API endpoint of the Zipkin service where the spans will be sent. When
  using a standard Zipkin installation, the API endpoint is typically
  /api/v1/spans, which is the default value.
  
  


.. _envoy_api_msg_Tracing:

Tracing
-------

`[Tracing proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L143>`_

The :ref:`tracing <arch_overview_tracing>` configuration specifies global
settings for the HTTP tracer used by Envoy. The configuration is defined by
the :ref:`Bootstrap <envoy_api_msg_Bootstrap>` :ref:`tracing
<envoy_api_field_Bootstrap.tracing>` field. Envoy may support other tracers
in the future, but right now the HTTP tracer is the only one supported.

.. code-block:: json

  {
    "http": "{...}"
  }

.. _envoy_api_field_Tracing.http:

http
  (:ref:`Tracing.Http <envoy_api_msg_Tracing.Http>`) Provides configuration for the HTTP tracer.
  
  
.. _envoy_api_msg_Tracing.Http:

Tracing.Http
------------

`[Tracing.Http proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L144>`_


.. code-block:: json

  {
    "name": "...",
    "config": "{...}"
  }

.. _envoy_api_field_Tracing.Http.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the HTTP trace driver to instantiate. The name must match a
  supported HTTP trace driver. *envoy.lightstep* and *envoy.zipkin* are
  built-in trace drivers.
  
  
.. _envoy_api_field_Tracing.Http.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Trace driver specific configuration which depends on the driver being
  instantiated. See the :ref:`LightstepConfig
  <envoy_api_msg_LightstepConfig>` and :ref:`ZipkinConfig
  <envoy_api_msg_ZipkinConfig>` trace drivers for examples.
  
  



.. _envoy_api_msg_Admin:

Admin
-----

`[Admin proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L162>`_

Administration interface :ref:`operations documentation
<operations_admin_interface>`.

.. code-block:: json

  {
    "access_log_path": "...",
    "profile_path": "...",
    "address": "{...}"
  }

.. _envoy_api_field_Admin.access_log_path:

access_log_path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The path to write the access log for the administration server. If no
  access log is desired specify ‘/dev/null’.
  
  
.. _envoy_api_field_Admin.profile_path:

profile_path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The cpu profiler output path for the administration server. If no profile
  path is specified, the default is ‘/var/log/envoy/envoy.prof’.
  
  
.. _envoy_api_field_Admin.address:

address
  (:ref:`Address <envoy_api_msg_Address>`, *REQUIRED*) The TCP address that the administration server will listen on.
  
  


.. _envoy_api_msg_ClusterManager:

ClusterManager
--------------

`[ClusterManager proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L176>`_

Cluster manager :ref:`architecture overview <arch_overview_cluster_manager>`.

.. code-block:: json

  {
    "local_cluster_name": "...",
    "outlier_detection": "{...}",
    "upstream_bind_config": "{...}",
    "load_stats_config": "{...}"
  }

.. _envoy_api_field_ClusterManager.local_cluster_name:

local_cluster_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Name of the local cluster (i.e., the cluster that owns the Envoy running
  this configuration). In order to enable :ref:`zone aware routing
  <arch_overview_load_balancing_zone_aware_routing>` this option must be set.
  If *local_cluster_name* is defined then :ref:`clusters
  <config_cluster_manager_clusters>` must be defined in the :ref:`Bootstrap
  static cluster resources
  <envoy_api_field_Bootstrap.StaticResources.clusters>`. This is unrelated to
  the :option:`--service-cluster` option which does not `affect zone aware
  routing <https://github.com/envoyproxy/envoy/issues/774>`_.
  
  
.. _envoy_api_field_ClusterManager.outlier_detection:

outlier_detection
  (:ref:`ClusterManager.OutlierDetection <envoy_api_msg_ClusterManager.OutlierDetection>`) Optional global configuration for outlier detection.
  
  
.. _envoy_api_field_ClusterManager.upstream_bind_config:

upstream_bind_config
  (:ref:`BindConfig <envoy_api_msg_BindConfig>`) Optional configuration used to bind newly established upstream connections.
  This may be overridden on a per-cluster basis by upstream_bind_config in the cds_config.
  
  
.. _envoy_api_field_ClusterManager.load_stats_config:

load_stats_config
  (:ref:`ApiConfigSource <envoy_api_msg_ApiConfigSource>`) A management server endpoint to stream load stats to via
  *StreamLoadStats*. This must have :ref:`api_type <envoy_api_field_ApiConfigSource.api_type>`
  :ref:`GRPC <envoy_api_enum_value_ApiConfigSource.ApiType.GRPC>`.
  
  
.. _envoy_api_msg_ClusterManager.OutlierDetection:

ClusterManager.OutlierDetection
-------------------------------

`[ClusterManager.OutlierDetection proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L188>`_


.. code-block:: json

  {
    "event_log_path": "..."
  }

.. _envoy_api_field_ClusterManager.OutlierDetection.event_log_path:

event_log_path
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the path to the outlier event log.
  
  



.. _envoy_api_msg_StatsdSink:

StatsdSink
----------

`[StatsdSink proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L206>`_

Stats configuration proto schema for built-in *envoy.statsd* sink.

.. code-block:: json

  {
    "address": "{...}",
    "tcp_cluster_name": "..."
  }

.. _envoy_api_field_StatsdSink.address:

address
  (:ref:`Address <envoy_api_msg_Address>`) The UDP address of a running `statsd <https://github.com/etsy/statsd>`_
  compliant listener. If specified, statistics will be flushed to this
  address.
  
  
  Precisely one of :ref:`address <envoy_api_field_StatsdSink.address>`, :ref:`tcp_cluster_name <envoy_api_field_StatsdSink.tcp_cluster_name>` must be set.
  
.. _envoy_api_field_StatsdSink.tcp_cluster_name:

tcp_cluster_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of a cluster that is running a TCP `statsd
  <https://github.com/etsy/statsd>`_ compliant listener. If specified,
  Envoy will connect to this cluster to flush statistics.
  
  
  Precisely one of :ref:`address <envoy_api_field_StatsdSink.address>`, :ref:`tcp_cluster_name <envoy_api_field_StatsdSink.tcp_cluster_name>` must be set.
  


.. _envoy_api_msg_StatsSink:

StatsSink
---------

`[StatsSink proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L223>`_

Configuration for pluggable stats sinks.

.. code-block:: json

  {
    "name": "...",
    "config": "{...}"
  }

.. _envoy_api_field_StatsSink.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The name of the stats sink to instantiate. The name must match a supported
  stats sink. *envoy.statsd* is a built-in sink suitable for emitting to
  `statsd <https://github.com/etsy/statsd>`_.
  
  
.. _envoy_api_field_StatsSink.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Stats sink specific configuration which depends on the sink being
  instantiated. See :ref:`StatsdSink <envoy_api_msg_StatsdSink>` for an
  example.
  
  


.. _envoy_api_msg_TagSpecifier:

TagSpecifier
------------

`[TagSpecifier proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L238>`_

Designates a tag to strip from the tag extracted name and provide as a named
tag value for all statistics. This will only occur if any part of the name
matches the regex provided with one or more capture groups.

.. code-block:: json

  {
    "tag_name": "...",
    "regex": "..."
  }

.. _envoy_api_field_TagSpecifier.tag_name:

tag_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Attaches an identifier to the tag values to identify the tag being in the
  sink. Envoy has a set of default names and regexes to extract dynamic
  portions of existing stats, which can be found in `well_known_names.h
  <https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.h>`_
  in the Envoy repository. If a :ref:`tag_name
  <envoy_api_field_TagSpecifier.tag_name>` is provided in the config with an
  empty regex, Envoy will attempt to find that name in its set of defaults
  and use the accompanying regex.
  
  .. note::
  
    If any default tags are specified twice, the config will be considered
    invalid.
  
  
.. _envoy_api_field_TagSpecifier.regex:

regex
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The first capture group identifies the portion of the name to remove. The
  second capture group (which will normally be nested inside the first) will
  designate the value of the tag for the statistic. If no second capture
  group is provided, the first will also be used to set the value of the tag.
  All other capture groups will be ignored.
  
  Take for example, with a stat name ``cluster.foo_cluster.upstream_rq_timeout``
  and
  
  .. code-block:: json
  
    {
      "tag_name": "envoy.cluster_name",
      "regex": "^cluster\.((.+?)\.)"
    }
  
  Note that the regex will remove ``foo_cluster.`` making the tag extracted
  name ``cluster.upstream_rq_timeout`` and the tag value for
  ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
  ``.`` character because of the second capture group).
  
  An example with two regexes and stat name
  ``http.connection_manager_1.user_agent.ios.downstream_cx_total``:
  
  .. code-block:: json
  
    [
      {
        "tag_name": "envoy.http_user_agent",
        "regex": "^http(?=\.).*?\.user_agent\.((.+?)\.)\w+?$"
      },
      {
        "tag_name": "envoy.http_conn_manager_prefix",
        "regex": "^http\.((.*?)\.)"
      }
    ]
  
  The first regex will remove ``ios.``, leaving the tag extracted name
  ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
  ``envoy.http_user_agent`` will be added with tag value ``ios``.
  
  The second regex will remove ``connection_manager_1.`` from the tag
  extracted name produced by the first regex
  ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
  ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
  ``envoy.http_conn_manager_prefix`` will be added with the tag value
  ``connection_manager_1``.
  
  


.. _envoy_api_msg_StatsConfig:

StatsConfig
-----------

`[StatsConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L305>`_

Statistics :ref:`architecture overview <arch_overview_statistics>`.

.. code-block:: json

  {
    "stats_tags": [],
    "use_all_default_tags": "{...}"
  }

.. _envoy_api_field_StatsConfig.stats_tags:

stats_tags
  (:ref:`TagSpecifier <envoy_api_msg_TagSpecifier>`) Each stat name is iteratively processed through these tag specifiers.
  When a tag is matched, the first capture group is removed from the name so
  later :ref:`TagSpecifiers <envoy_api_msg_TagSpecifier>` cannot match that
  same portion of the match.
  
  
.. _envoy_api_field_StatsConfig.use_all_default_tags:

use_all_default_tags
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Use all default tag regexes specified in Envoy. These can be combined with
  custom tags specified in :ref:`stats_tags
  <envoy_api_field_StatsConfig.stats_tags>`. They will be processed before
  the custom tags.
  
  .. note::
  
    If any default tags are specified twice, the config will be considered
    invalid.
  
  See `well_known_names.h
  <https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.h>`_
  for a list of the default tags in Envoy.
  
  If not provided, the value is assumed to be true.
  
  


.. _envoy_api_msg_Watchdog:

Watchdog
--------

`[Watchdog proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L332>`_

Envoy process watchdog configuration. When configured, this monitors for
nonresponsive threads and kills the process after the configured thresholds.

.. code-block:: json

  {
    "miss_timeout": "{...}",
    "megamiss_timeout": "{...}",
    "kill_timeout": "{...}",
    "multikill_timeout": "{...}"
  }

.. _envoy_api_field_Watchdog.miss_timeout:

miss_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The duration after which Envoy counts a nonresponsive thread in the
  *server.watchdog_miss* statistic. If not specified the default is 200ms.
  
  
.. _envoy_api_field_Watchdog.megamiss_timeout:

megamiss_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The duration after which Envoy counts a nonresponsive thread in the
  *server.watchdog_mega_miss* statistic. If not specified the default is
  1000ms.
  
  
.. _envoy_api_field_Watchdog.kill_timeout:

kill_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) If a watched thread has been nonresponsive for this duration, assume a
  programming error and kill the entire Envoy process. Set to 0 to disable
  kill behavior. If not specified the default is 0 (disabled).
  
  
.. _envoy_api_field_Watchdog.multikill_timeout:

multikill_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) If at least two watched threads have been nonresponsive for at least this
  duration assume a true deadlock and kill the entire Envoy process. Set to 0
  to disable this behavior. If not specified the default is 0 (disabled).
  
  


.. _envoy_api_msg_Runtime:

Runtime
-------

`[Runtime proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L354>`_

Runtime :ref:`configuration overview <config_runtime>`.

.. code-block:: json

  {
    "symlink_root": "...",
    "subdirectory": "...",
    "override_subdirectory": "..."
  }

.. _envoy_api_field_Runtime.symlink_root:

symlink_root
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The implementation assumes that the file system tree is accessed via a
  symbolic link. An atomic link swap is used when a new tree should be
  switched to. This parameter specifies the path to the symbolic link. Envoy
  will watch the location for changes and reload the file system tree when
  they happen.
  
  
.. _envoy_api_field_Runtime.subdirectory:

subdirectory
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies the subdirectory to load within the root directory. This is
  useful if multiple systems share the same delivery mechanism. Envoy
  configuration elements can be contained in a dedicated subdirectory.
  
  
.. _envoy_api_field_Runtime.override_subdirectory:

override_subdirectory
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Specifies an optional subdirectory to load within the root directory. If
  specified and the directory exists, configuration values within this
  directory will override those found in the primary subdirectory. This is
  useful when Envoy is deployed across many different types of servers.
  Sometimes it is useful to have a per service cluster directory for runtime
  configuration. See below for exactly how the override directory is used.
  
  


.. _envoy_api_msg_RateLimitServiceConfig:

RateLimitServiceConfig
----------------------

`[RateLimitServiceConfig proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/bootstrap.proto#L377>`_

Rate limit :ref:`configuration overview <config_rate_limit_service>`.

.. code-block:: json

  {
    "cluster_name": "..."
  }

.. _envoy_api_field_RateLimitServiceConfig.cluster_name:

cluster_name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Specifies the cluster manager cluster name that hosts the rate limit
  service. The client will connect to this cluster when it needs to make rate
  limit service requests.
  
  

