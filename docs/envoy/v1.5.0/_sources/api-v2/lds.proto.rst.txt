.. _envoy_api_file_api/lds.proto:

Listeners and LDS
=================

Listener :ref:`configuration overview <config_listeners>`

.. _envoy_api_msg_Listener:

Listener
--------

`[Listener proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/lds.proto#L34>`_


.. code-block:: json

  {
    "name": "...",
    "address": "{...}",
    "filter_chains": [],
    "use_original_dst": "{...}",
    "per_connection_buffer_limit_bytes": "{...}",
    "drain_type": "..."
  }

.. _envoy_api_field_Listener.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) The unique name by which this listener is known. If no name is provided,
  Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
  updated or removed via :ref:`LDS <config_listeners_lds>` a unique name must be provided.
  By default, the maximum length of a listener's name is limited to 60 characters. This limit can
  be increased by setting the :option:`--max-obj-name-len` command line argument to the desired
  value.
  
  
.. _envoy_api_field_Listener.address:

address
  (:ref:`Address <envoy_api_msg_Address>`, *REQUIRED*) The address that the listener should listen on. In general, the address must be unique, though
  that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
  Linux as the actual port will be allocated by the OS.
  
  
.. _envoy_api_field_Listener.filter_chains:

filter_chains
  (:ref:`FilterChain <envoy_api_msg_FilterChain>`, *REQUIRED*) A list of filter chains to consider for this listener. The
  :ref:`FilterChain <envoy_api_msg_FilterChain>` with the most specific :ref:`FilterChainMatch
  <envoy_api_msg_FilterChainMatch>` criteria is used on a connection.
  
  .. attention::
  
    In the current version, multiple filter chains are supported **only** so that SNI can be
    configured. See the :ref:`FAQ entry <faq_how_to_setup_sni>` on how to configure SNI for more
    information. When multiple filter chains are configured, each filter chain must have an
    **identical** set of :ref:`filters <envoy_api_field_FilterChain.filters>`. If the filters
    differ, the configuration will fail to load. In the future, this limitation will be relaxed
    such that different filters can be used depending on which filter chain matches (based on SNI
    or some other parameter).
  
  
.. _envoy_api_field_Listener.use_original_dst:

use_original_dst
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) If a connection is redirected using *iptables*, the port on which the proxy
  receives it might be different from the original destination address. When this flag is set to
  true, the listener hands off redirected connections to the listener associated with the
  original destination address. If there is no listener associated with the original destination
  address, the connection is handled by the listener that receives it. Defaults to false.
  
  
.. _envoy_api_field_Listener.per_connection_buffer_limit_bytes:

per_connection_buffer_limit_bytes
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) Soft limit on size of the listener’s new connection read and write buffers.
  If unspecified, an implementation defined default is applied (1MiB).
  
  


.. _envoy_api_field_Listener.drain_type:

drain_type
  (:ref:`Listener.DrainType <envoy_api_enum_Listener.DrainType>`) The type of draining to perform at a listener-wide level.
  
  

.. _envoy_api_enum_Listener.DrainType:

Enum Listener.DrainType
-----------------------

`[Listener.DrainType proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/lds.proto#L93>`_


.. _envoy_api_enum_value_Listener.DrainType.DEFAULT:

DEFAULT
  *(DEFAULT)* ⁣Drain in response to calling /healthcheck/fail admin endpoint (along with the health check
  filter), listener removal/modification, and hot restart.
  
  
.. _envoy_api_enum_value_Listener.DrainType.MODIFY_ONLY:

MODIFY_ONLY
  ⁣Drain in response to listener removal/modification and hot restart. This setting does not
  include /healthcheck/fail. This setting may be desirable if Envoy is hosting both ingress
  and egress listeners.
  
  

.. _envoy_api_msg_Filter:

Filter
------

`[Filter proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/lds.proto#L107>`_


.. code-block:: json

  {
    "name": "...",
    "config": "{...}"
  }

.. _envoy_api_field_Filter.name:

name
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The name of the filter to instantiate. The name must match a supported
  filter. The built-in filters are:
  
  * :ref:`envoy.echo <config_network_filters_echo>`
  * :ref:`envoy.http_connection_manager <config_http_conn_man>`
  * :ref:`envoy.mongo_proxy <config_network_filters_mongo_proxy>`
  * :ref:`envoy.redis_proxy <config_network_filters_redis_proxy>`
  * :ref:`envoy.tcp_proxy <config_network_filters_tcp_proxy>`
  
  
.. _envoy_api_field_Filter.config:

config
  (`Struct <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct>`_) Filter specific configuration which depends on the filter being
  instantiated. See the supported filters for further documentation.
  
  



.. _envoy_api_msg_FilterChainMatch:

FilterChainMatch
----------------

`[FilterChainMatch proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/lds.proto#L134>`_

Specifies the match criteria for selecting a specific filter chain for a
listener.

.. code-block:: json

  {
    "sni_domains": []
  }

.. _envoy_api_field_FilterChainMatch.sni_domains:

sni_domains
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If non-empty, the SNI domains to consider. May contain a wildcard prefix,
  e.g. ``*.example.com``.
  
  .. attention::
  
    See the :ref:`FAQ entry <faq_how_to_setup_sni>` on how to configure SNI for more
    information.
  
  








.. _envoy_api_msg_FilterChain:

FilterChain
-----------

`[FilterChain proto] <https://github.com/envoyproxy/data-plane-api/blob/master/api/lds.proto#L178>`_

A filter chain wraps a set of match criteria, an option TLS context, a set of filters, and
various other parameters.

.. code-block:: json

  {
    "filter_chain_match": "{...}",
    "tls_context": "{...}",
    "filters": [],
    "use_proxy_proto": "{...}"
  }

.. _envoy_api_field_FilterChain.filter_chain_match:

filter_chain_match
  (:ref:`FilterChainMatch <envoy_api_msg_FilterChainMatch>`) The criteria to use when matching a connection to this filter chain.
  
  
.. _envoy_api_field_FilterChain.tls_context:

tls_context
  (:ref:`DownstreamTlsContext <envoy_api_msg_DownstreamTlsContext>`) The TLS context for this filter chain.
  
  
.. _envoy_api_field_FilterChain.filters:

filters
  (:ref:`Filter <envoy_api_msg_Filter>`) A list of individual network filters that make up the filter chain for
  connections established with the listener. Order matters as the filters are
  processed sequentially as connection events happen. Note: If the filter
  list is empty, the connection will close by default.
  
  
.. _envoy_api_field_FilterChain.use_proxy_proto:

use_proxy_proto
  (`BoolValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#boolvalue>`_) Whether the listener should expect a PROXY protocol V1 header on new
  connections. If this option is enabled, the listener will assume that that
  remote address of the connection is the one specified in the header. Some
  load balancers including the AWS ELB support this option. If the option is
  absent or set to false, Envoy will use the physical peer address of the
  connection as the remote address.
  
  



