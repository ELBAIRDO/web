.. _envoy_api_file_envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto:

Adaptive Concurrency
====================

Adaptive Concurrency Control :ref:`configuration overview
<config_http_filters_adaptive_concurrency>`.

.. _envoy_api_msg_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig:

config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig
------------------------------------------------------------------------

`[config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig proto] <https://github.com/envoyproxy/envoy/blob/v1.12.5/api/envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto#L22>`_

Configuration parameters for the gradient controller.

.. code-block:: json

  {
    "sample_aggregate_percentile": "{...}",
    "concurrency_limit_params": "{...}",
    "min_rtt_calc_params": "{...}"
  }

.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.sample_aggregate_percentile:

sample_aggregate_percentile
  (:ref:`type.Percent <envoy_api_msg_type.Percent>`) The percentile to use when summarizing aggregated samples. Defaults to p50.
  
  
.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.concurrency_limit_params:

concurrency_limit_params
  (:ref:`config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams <envoy_api_msg_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams>`, *REQUIRED*) 
  
.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.min_rtt_calc_params:

min_rtt_calc_params
  (:ref:`config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams <envoy_api_msg_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams>`, *REQUIRED*) 
  
.. _envoy_api_msg_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams:

config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams
----------------------------------------------------------------------------------------------------------

`[config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams proto] <https://github.com/envoyproxy/envoy/blob/v1.12.5/api/envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto#L25>`_

Parameters controlling the periodic recalculation of the concurrency limit from sampled request
latencies.

.. code-block:: json

  {
    "max_gradient": "{...}",
    "max_concurrency_limit": "{...}",
    "concurrency_update_interval": "{...}"
  }

.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams.max_gradient:

max_gradient
  (`DoubleValue <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#doublevalue>`_) The maximum value the gradient is allowed to take. This influences how aggressively the
  concurrency limit can increase. Defaults to 2.0.
  
  
.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams.max_concurrency_limit:

max_concurrency_limit
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The allowed upper-bound on the calculated concurrency limit. Defaults to 1000.
  
  
.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams.concurrency_update_interval:

concurrency_update_interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The period of time samples are taken to recalculate the concurrency limit.
  
  


.. _envoy_api_msg_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams:

config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams
----------------------------------------------------------------------------------------------------

`[config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams proto] <https://github.com/envoyproxy/envoy/blob/v1.12.5/api/envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto#L41>`_

Parameters controlling the periodic minRTT recalculation.

.. code-block:: json

  {
    "interval": "{...}",
    "request_count": "{...}",
    "jitter": "{...}"
  }

.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams.interval:

interval
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The time interval between recalculating the minimum request round-trip time.
  
  
.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams.request_count:

request_count
  (`UInt32Value <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#uint32value>`_) The number of requests to aggregate/sample during the minRTT recalculation window before
  updating. Defaults to 50.
  
  
.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams.jitter:

jitter
  (:ref:`type.Percent <envoy_api_msg_type.Percent>`) Randomized time delta that will be introduced to the start of the minRTT calculation window.
  This is represented as a percentage of the interval duration. Defaults to 15%.
  
  Example: If the interval is 10s and the jitter is 15%, the next window will begin
  somewhere in the range (10s - 11.5s).
  
  



.. _envoy_api_msg_config.filter.http.adaptive_concurrency.v2alpha.AdaptiveConcurrency:

config.filter.http.adaptive_concurrency.v2alpha.AdaptiveConcurrency
-------------------------------------------------------------------

`[config.filter.http.adaptive_concurrency.v2alpha.AdaptiveConcurrency proto] <https://github.com/envoyproxy/envoy/blob/v1.12.5/api/envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto#L69>`_


.. code-block:: json

  {
    "gradient_controller_config": "{...}",
    "enabled": "{...}"
  }

.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.AdaptiveConcurrency.gradient_controller_config:

gradient_controller_config
  (:ref:`config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig <envoy_api_msg_config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig>`, *REQUIRED*) Gradient concurrency control will be used.
  
  
  
.. _envoy_api_field_config.filter.http.adaptive_concurrency.v2alpha.AdaptiveConcurrency.enabled:

enabled
  (:ref:`core.RuntimeFeatureFlag <envoy_api_msg_core.RuntimeFeatureFlag>`) If set to false, the adaptive concurrency filter will operate as a pass-through filter. If the
  message is unspecified, the filter will be enabled.
  
  

