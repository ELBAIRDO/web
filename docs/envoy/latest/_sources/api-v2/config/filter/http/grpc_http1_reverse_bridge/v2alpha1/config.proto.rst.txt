.. _envoy_api_file_envoy/config/filter/http/grpc_http1_reverse_bridge/v2alpha1/config.proto:

gRPC HTTP/1.1 Reverse Bridge
============================

gRPC HTTP/1.1 Reverse Bridge :ref:`configuration overview
<config_http_filters_grpc_http1_reverse_bridge>`.

.. _envoy_api_msg_config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig:

config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig
------------------------------------------------------------------

`[config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig proto] <https://github.com/envoyproxy/envoy/blob/999c27b905d41b402bf505244dbde6bfdf224636/api/envoy/config/filter/http/grpc_http1_reverse_bridge/v2alpha1/config.proto#L15>`_

gRPC reverse bridge filter configuration

.. code-block:: json

  {
    "content_type": "...",
    "withhold_grpc_frames": "..."
  }

.. _envoy_api_field_config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig.content_type:

content_type
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The content-type to pass to the upstream when the gRPC bridge filter is applied.
  The filter will also validate that the upstream responds with the same content type.
  
  
.. _envoy_api_field_config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig.withhold_grpc_frames:

withhold_grpc_frames
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) If true, Envoy will assume that the upstream doesn't understand gRPC frames and
  strip the gRPC frame from the request, and add it back in to the response. This will
  hide the gRPC semantics from the upstream, allowing it to receive and respond with a
  simple binary encoded protobuf.
  
  

