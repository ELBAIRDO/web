.. _envoy_api_file_envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto:

Redis Proxy
===========

Redis Proxy :ref:`configuration overview <config_network_filters_redis_proxy>`.

.. _envoy_api_msg_config.filter.network.redis_proxy.v2.RedisProxy:

config.filter.network.redis_proxy.v2.RedisProxy
-----------------------------------------------

`[config.filter.network.redis_proxy.v2.RedisProxy proto] <https://github.com/envoyproxy/envoy/blob/683b875b020197a092be3dc30ca3da39ae5928c6/api/envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto#L17>`_


.. code-block:: json

  {
    "stat_prefix": "...",
    "cluster": "...",
    "settings": "{...}",
    "latency_in_micros": "...",
    "prefix_routes": "{...}"
  }

.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.stat_prefix:

stat_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) The prefix to use when emitting :ref:`statistics <config_network_filters_redis_proxy_stats>`.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Name of cluster from cluster manager. See the :ref:`configuration section
  <arch_overview_redis_configuration>` of the architecture overview for recommendations on
  configuring the backing cluster.
  
  .. attention::
  
    This field is deprecated. Use a :ref:`catch-all
    cluster<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.catch_all_cluster>`
    instead.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.settings:

settings
  (:ref:`config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings <envoy_api_msg_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings>`, *REQUIRED*) Network settings for the connection pool to the upstream clusters.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.latency_in_micros:

latency_in_micros
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Indicates that latency stat should be computed in microseconds. By default it is computed in
  milliseconds.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.prefix_routes:

prefix_routes
  (:ref:`config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes <envoy_api_msg_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes>`) List of **unique** prefixes used to separate keys from different workloads to different
  clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
  cluster can be used to forward commands when there is no match. Time complexity of the
  lookups are in O(min(longest key prefix, key length)).
  
  Example:
  
  .. code-block:: yaml
  
     prefix_routes:
       routes:
         - prefix: "ab"
           cluster: "cluster_a"
         - prefix: "abc"
           cluster: "cluster_b"
  
  When using the above routes, the following prefixes would be sent to:
  
  * 'get abc:users' would retrive the key 'abc:users' from cluster_b.
  * 'get ab:users' would retrive the key 'ab:users' from cluster_a.
  * 'get z:users' would return a NoUpstreamHost error. A :ref:`catch-all
    cluster<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.catch_all_cluster>`
    would have retrieved the key from that cluster instead.
  
  See the :ref:`configuration section
  <arch_overview_redis_configuration>` of the architecture overview for recommendations on
  configuring the backing clusters.
  
  
.. _envoy_api_msg_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings:

config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings
----------------------------------------------------------------

`[config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings proto] <https://github.com/envoyproxy/envoy/blob/683b875b020197a092be3dc30ca3da39ae5928c6/api/envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto#L33>`_

Redis connection pool settings.

.. code-block:: json

  {
    "op_timeout": "{...}",
    "enable_hashtagging": "...",
    "enable_redirection": "...",
    "max_buffer_size_before_flush": "...",
    "buffer_flush_timeout": "{...}"
  }

.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.op_timeout:

op_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) Per-operation timeout in milliseconds. The timer starts when the first
  command of a pipeline is written to the backend connection. Each response received from Redis
  resets the timer since it signifies that the next command is being processed by the backend.
  The only exception to this behavior is when a connection to a backend is not yet established.
  In that case, the connect timeout on the cluster will govern the timeout until the connection
  is ready.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.enable_hashtagging:

enable_hashtagging
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
  forwarded to the same upstream. The hash key used for determining the upstream in a
  consistent hash ring configuration will be computed from the hash tagged key instead of the
  whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
  implementation <https://redis.io/topics/cluster-spec#keys-hash-tags>`_.
  
  Examples:
  
  * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
  * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.enable_redirection:

enable_redirection
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Accept `moved and ask redirection
  <https://redis.io/topics/cluster-spec#redirection-and-resharding>`_ errors from upstream
  redis servers, and retry commands to the specified target server. The target server does not
  need to be known to the cluster manager. If the command cannot be redirected, then the
  original error is passed downstream unchanged. By default, this support is not enabled.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.max_buffer_size_before_flush:

max_buffer_size_before_flush
  (`uint32 <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Maximum size of encoded request buffer before flush is triggered and encoded requests
  are sent upstream. If this is unset, the buffer flushes whenever it receives data
  and performs no batching.
  This feature makes it possible for multiple clients to send requests to Envoy and have
  them batched- for example if one is running several worker processes, each with its own
  Redis connection. There is no benefit to using this with a single downstream process.
  Recommended size (if enabled) is 1024 bytes.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.buffer_flush_timeout:

buffer_flush_timeout
  (`Duration <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration>`_) The encoded request buffer is flushed N milliseconds after the first request has been
  encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
  If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
  the timer should be set according to the number of clients, overall request rate and
  desired maximum latency for a single command. For example, if there are many requests
  being batched together at a high rate, the buffer will likely be filled before the timer
  fires. Alternatively, if the request rate is lower the buffer will not be filled as often
  before the timer fires.
  If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
  defaults to 3ms.
  
  


.. _envoy_api_msg_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes:

config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes
------------------------------------------------------------

`[config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes proto] <https://github.com/envoyproxy/envoy/blob/683b875b020197a092be3dc30ca3da39ae5928c6/api/envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto#L91>`_


.. code-block:: json

  {
    "routes": [],
    "case_insensitive": "...",
    "catch_all_cluster": "..."
  }

.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.routes:

routes
  (:ref:`config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route <envoy_api_msg_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route>`) List of prefix routes.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.case_insensitive:

case_insensitive
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Indicates that prefix matching should be case insensitive.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.catch_all_cluster:

catch_all_cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Optional catch-all route to forward commands that doesn't match any of the routes. The
  catch-all route becomes required when no routes are specified.
  
  
.. _envoy_api_msg_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route:

config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route
------------------------------------------------------------------

`[config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route proto] <https://github.com/envoyproxy/envoy/blob/683b875b020197a092be3dc30ca3da39ae5928c6/api/envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto#L92>`_


.. code-block:: json

  {
    "prefix": "...",
    "remove_prefix": "...",
    "cluster": "..."
  }

.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route.prefix:

prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) String prefix that must match the beginning of the keys. Envoy will always favor the
  longest match.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route.remove_prefix:

remove_prefix
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Indicates if the prefix needs to be removed from the key when forwarded.
  
  
.. _envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route.cluster:

cluster
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, *REQUIRED*) Upstream cluster to forward the command to.
  
  



