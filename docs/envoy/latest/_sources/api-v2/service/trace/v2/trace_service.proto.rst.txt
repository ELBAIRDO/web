.. _envoy_api_file_envoy/service/trace/v2/trace_service.proto:

Trace service
=============


.. _envoy_api_msg_service.trace.v2.StreamTracesResponse:

service.trace.v2.StreamTracesResponse
-------------------------------------

`[service.trace.v2.StreamTracesResponse proto] <https://github.com/envoyproxy/envoy/blob/e5366cc3d87c0a6d9e8b112b7f01abbcb6241b8f/api/envoy/service/trace/v2/trace_service.proto#L31>`_


.. code-block:: json

  {}




.. _envoy_api_msg_service.trace.v2.StreamTracesMessage:

service.trace.v2.StreamTracesMessage
------------------------------------

`[service.trace.v2.StreamTracesMessage proto] <https://github.com/envoyproxy/envoy/blob/e5366cc3d87c0a6d9e8b112b7f01abbcb6241b8f/api/envoy/service/trace/v2/trace_service.proto#L34>`_


.. code-block:: json

  {
    "identifier": "{...}",
    "spans": []
  }

.. _envoy_api_field_service.trace.v2.StreamTracesMessage.identifier:

identifier
  (:ref:`service.trace.v2.StreamTracesMessage.Identifier <envoy_api_msg_service.trace.v2.StreamTracesMessage.Identifier>`) Identifier data effectively is a structured metadata.
  As a performance optimization this will only be sent in the first message
  on the stream.
  
  
.. _envoy_api_field_service.trace.v2.StreamTracesMessage.spans:

spans
  (.opencensus.proto.trace.v1.Span) A list of Span entries
  
  
.. _envoy_api_msg_service.trace.v2.StreamTracesMessage.Identifier:

service.trace.v2.StreamTracesMessage.Identifier
-----------------------------------------------

`[service.trace.v2.StreamTracesMessage.Identifier proto] <https://github.com/envoyproxy/envoy/blob/e5366cc3d87c0a6d9e8b112b7f01abbcb6241b8f/api/envoy/service/trace/v2/trace_service.proto#L35>`_


.. code-block:: json

  {
    "node": "{...}"
  }

.. _envoy_api_field_service.trace.v2.StreamTracesMessage.Identifier.node:

node
  (:ref:`core.Node <envoy_api_msg_core.Node>`, *REQUIRED*) The node sending the access log messages over the stream.
  
  


