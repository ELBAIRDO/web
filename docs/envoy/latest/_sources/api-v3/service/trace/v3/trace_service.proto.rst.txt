.. _envoy_v3_api_file_envoy/service/trace/v3/trace_service.proto:

Trace service
=============


.. _envoy_v3_api_msg_service.trace.v3.StreamTracesResponse:

service.trace.v3.StreamTracesResponse
-------------------------------------

`[service.trace.v3.StreamTracesResponse proto] <https://github.com/envoyproxy/envoy/blob/5ee4c45b8b2c6c679dc7468a1971bcc95c7ad617/api/envoy/service/trace/v3/trace_service.proto#L32>`_


.. code-block:: json

  {}




.. _envoy_v3_api_msg_service.trace.v3.StreamTracesMessage:

service.trace.v3.StreamTracesMessage
------------------------------------

`[service.trace.v3.StreamTracesMessage proto] <https://github.com/envoyproxy/envoy/blob/5ee4c45b8b2c6c679dc7468a1971bcc95c7ad617/api/envoy/service/trace/v3/trace_service.proto#L37>`_


.. code-block:: json

  {
    "identifier": "{...}",
    "spans": []
  }

.. _envoy_v3_api_field_service.trace.v3.StreamTracesMessage.identifier:

identifier
  (:ref:`service.trace.v3.StreamTracesMessage.Identifier <envoy_v3_api_msg_service.trace.v3.StreamTracesMessage.Identifier>`) Identifier data effectively is a structured metadata.
  As a performance optimization this will only be sent in the first message
  on the stream.
  
  
.. _envoy_v3_api_field_service.trace.v3.StreamTracesMessage.spans:

spans
  (.opencensus.proto.trace.v1.Span) A list of Span entries
  
  
.. _envoy_v3_api_msg_service.trace.v3.StreamTracesMessage.Identifier:

service.trace.v3.StreamTracesMessage.Identifier
-----------------------------------------------

`[service.trace.v3.StreamTracesMessage.Identifier proto] <https://github.com/envoyproxy/envoy/blob/5ee4c45b8b2c6c679dc7468a1971bcc95c7ad617/api/envoy/service/trace/v3/trace_service.proto#L41>`_


.. code-block:: json

  {
    "node": "{...}"
  }

.. _envoy_v3_api_field_service.trace.v3.StreamTracesMessage.Identifier.node:

node
  (:ref:`config.core.v3.Node <envoy_v3_api_msg_config.core.v3.Node>`, *REQUIRED*) The node sending the access log messages over the stream.
  
  


